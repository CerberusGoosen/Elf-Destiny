template character_age_or_death_text
{
    hbox = {
        block "list_layout" {
            minimumsize = { 62 0 }
            expand = {}
        }

        margin_right = 5
        spacing = 2

        ### URF CHANGES START ###
        block "character_age"
        {
            text_single = {
                using = ed_character_age_text
                # placeholder shou be:
                # raw_text = "[Character.GetAge]"
                align = nobaseline
            }
        }
        ### URF CHANGES END ###

        icon = {
            visible = "[Not(Character.IsDeadAndValid)]"
            size = { 23 23 }
            framesize = { 60 60 }
            frame = "[Character.GetHealthIconFrame]"
            texture = "gfx/interface/icons/character_status/icon_health.dds"
            tooltip = "[Character.GetHealthInfo]"
        }

        block "is_dead"
        {
            icon = {
                name = "is_dead"
                visible = "[Character.IsDeadAndValid]"
                size = { 23 23 }

                texture = "[Character.GetDeathReasonIcon]"
                tooltip = "CHARACTER_DEAD_TOOLTIP"
            }
        }
    }
}

types Lists
{
    type hbox_traits_list = hbox
    {
        layoutpolicy_horizontal = expanding
        ### URF Race Changes ###
        ed_race_icon = {}
        ### URF Race Changes ###

        widget = {
            layoutpolicy_horizontal = expanding
            size = { 0 55 }

            hbox = {
                name = "3_personality_traits"
                visible = "[LessThanOrEqualTo_int32(GetDataModelSize(TraitArrays.GetPersonalityTraits), '(int32)3')]"

                fixedgridbox = {
                    name = "personality_traits"
                    datamodel = "[TraitArrays.GetPersonalityTraits]"
                    flipdirection = yes
                    addcolumn = 54
                    addrow = 55
                    maxhorizontalslots = 3

                    item = {
                        icon_trait = {
                            blockoverride "icon_size"
                            {
                                size = { 55 55 }
                            }
                        }
                    }
                }

                hbox = {
                    visible = "[Not(IsDataModelEmpty(TraitArrays.GetTraits))]"
                    layoutpolicy_vertical = expanding
                    margin = { 5 10 }

                    divider_light = {
                        layoutpolicy_vertical = expanding
                    }
                }

                dynamicgridbox = {
                    name = "traits_big"
                    datamodel = "[TraitArrays.GetTraits]"
                    visible = "[LessThanOrEqualTo_int32(GetDataModelSize(TraitArrays.GetTraits), '(int32)4')]" ### URF
                    flipdirection = yes
                    addcolumn = 54
                    addrow = 55
                    maxhorizontalslots = 5
                    maxverticalslots = 1

                    # item = {
                    #     icon_trait = {
                    #         blockoverride "icon_size"
                    #         {
                    #             size = { 55 55 }
                    #         }
                    #     }
                    # }

                    item = {
                        flowcontainer = {
                            ignoreinvisible = yes

                            icon_trait = {
                                # visible = "[Trait.GetGroup]"
                                visible = "[Not( ObjectsEqual( Trait.GetGroup, GetTraitGroup( 'elf_mortality' )))]"
                                # visible = no
                                blockoverride "icon_size"
                                {
                                    size = { 55 55 }
                                }
    
                                # blockoverride "glow_radius"
                                # {
                                #     glow_radius = 4
                                # }
                            }

                        }
                    }
                }

                dynamicgridbox = {
                    name = "traits_medium"
                    datamodel = "[TraitArrays.GetTraits]"
                    visible = "[And(GreaterThan_int32(GetDataModelSize(TraitArrays.GetTraits), '(int32)4'), LessThanOrEqualTo_int32(GetDataModelSize(TraitArrays.GetTraits), '(int32)6'))]" ### URF
                    flipdirection = yes
                    addcolumn = 38 ### URF
                    addrow = 39 ### URF
                    maxhorizontalslots = 7
                    maxverticalslots = 1

                    # item = {
                    #     icon_trait = {
                    #         blockoverride "icon_size"
                    #         {
                    #             size = { 39 39 } ### URF
                    #         }

                    #         blockoverride "glow_radius"
                    #         {
                    #             glow_radius = 4
                    #         }
                    #     }
                    # }
                    
                    item = {
                        flowcontainer = {
                            ignoreinvisible = yes

                            icon_trait = {
                                # visible = "[Trait.GetGroup]"
                                visible = "[Not( ObjectsEqual( Trait.GetGroup, GetTraitGroup( 'elf_mortality' )))]"
                                # visible = no
                                blockoverride "icon_size"
                                {
                                    size = { 39 39 }
                                }
    
                                blockoverride "glow_radius"
                                {
                                    glow_radius = 4
                                }
                            }

                        }
                    }
                }

                dynamicgridbox = {
                    name = "traits_small"
                    datamodel = "[TraitArrays.GetTraits]"
                    visible = "[And(GreaterThan_int32(GetDataModelSize(TraitArrays.GetTraits), '(int32)6'), LessThanOrEqualTo_int32(GetDataModelSize(TraitArrays.GetTraits), '(int32)8'))]" ### URF
                    flipdirection = yes
                    addcolumn = 28
                    addrow = 29
                    maxhorizontalslots = 8 ### URF
                    maxverticalslots = 1


                    # item = {
                    #     icon_trait = {
                    #         blockoverride "icon_size"
                    #         {
                    #             size = { 29 29 }
                    #         }

                    #         blockoverride "glow_radius"
                    #         {
                    #             glow_radius = 3
                    #         }
                    #     }
                    # }

                    item = {
                        flowcontainer = {
                            ignoreinvisible = yes

                            icon_trait = {
                                # visible = "[Trait.GetGroup]"
                                visible = "[Not( ObjectsEqual( Trait.GetGroup, GetTraitGroup( 'elf_mortality' )))]"
                                # visible = no
                                blockoverride "icon_size"
                                {
                                    size = { 29 29 }
                                }
    
                                blockoverride "glow_radius"
                                {
                                    glow_radius = 3
                                }
                            }

                        }
                    }
                }
                


				scrollbox = {
					name = "traits_scroller"
					visible = "[GreaterThan_int32(GetDataModelSize(TraitArrays.GetTraits), '(int32)8')]"
					size = { 0 55 }
					layoutpolicy_vertical = fixed
					layoutpolicy_horizontal = expanding
					scrollbarpolicy_vertical = as_needed
					blockoverride "scrollbox_margins" {
							margin = { 0 5 }
							margin_right = 10
					}
					using = Animation_Tab_Switch
					blockoverride "scrollbox_content"
					{
                        # dynamicgridbox = {
                        #     name = "traits_tiny"
                        #     datamodel = "[TraitArrays.GetTraits]"
                        #     flipdirection = yes
                        #     addcolumn = 24
                        #     addrow = 25
                        #     maxhorizontalslots = 9 ### URF
                        #     datamodel_wrap = 9 ### URF
                        #     maxverticalslots = 2
                        #     maxverticalslots = 7
                        #     item = {
                        #         widget = {
                        #             # datacontext = "[ModifierItem.GetStaticModifier]"
                        #             # visible = no

                        #             icon_trait = {
                        #                 # visible = "[IsAnElfImmortalityTrait]"
                        #                 blockoverride "icon_size"
                        #                 {
                        #                     size = { 25 25 }
                        #                 }
            
                        #                 blockoverride "glow_radius"
                        #                 {
                        #                     glow_radius = 2
                        #                 }
                        #             }
                        #         }
                        #     }
                        # }

						spacing = 2
                        dynamicgridbox = {
                            name = "traits_tiny_scroll"
                            # datamodel = "[TraitArrays.GetTraitsWithoutFlag(ElfImmortal)]"
                            datamodel = "[TraitArrays.GetTraits]"
                            # visible = "[GreaterThan_int32(GetDataModelSize(TraitArrays.GetTraits), '(int32)8')]"
                            flipdirection = yes
                            # addcolumn = 24
                            # addrow = 25
                            maxhorizontalslots = 9 ### URF
                            datamodel_wrap = 9 ### URF
                            # maxverticalslots = 2
                            maxverticalslots = 7
                            ignoreinvisible = yes
        
                            item = {
                                flowcontainer = {
                                    ignoreinvisible = yes

                                    icon_trait = {
                                        # visible = "[Trait.GetGroup]"
                                        visible = "[Not( ObjectsEqual( Trait.GetGroup, GetTraitGroup( 'elf_mortality' )))]"
                                        # visible = no
                                        blockoverride "icon_size"
                                        {
                                            size = { 25 25 }
                                        }
            
                                        blockoverride "glow_radius"
                                        {
                                            glow_radius = 2
                                        }
                                    }

                                }
                            }
                        }
					}
				}


                expand = {}
            }

            hbox = {
                name = "4_personality_traits"
                visible = "[GreaterThan_int32(GetDataModelSize(TraitArrays.GetPersonalityTraits), '(int32)3')]"

                fixedgridbox = {
                    name = "personality_traits"
                    datamodel = "[TraitArrays.GetPersonalityTraits]"
                    flipdirection = yes
                    addcolumn = 54
                    addrow = 55
                    maxhorizontalslots = 4

                    item = {
                        icon_trait = {
                            blockoverride "icon_size"
                            {
                                size = { 55 55 }
                            }
                        }
                    }
                }

                hbox = {
                    visible = "[Not(IsDataModelEmpty(TraitArrays.GetTraits))]"
                    layoutpolicy_vertical = expanding
                    margin = { 5 10 }

                    divider_light = {
                        layoutpolicy_vertical = expanding
                    }
                }

                dynamicgridbox = {
                    name = "traits_big"
                    datamodel = "[TraitArrays.GetTraits]"
                    visible = "[LessThanOrEqualTo_int32(GetDataModelSize(TraitArrays.GetTraits), '(int32)3')]" ### URF
                    flipdirection = yes
                    addcolumn = 54
                    addrow = 55
                    maxhorizontalslots = 3 ### URF
                    maxverticalslots = 1

                    item = {
                        flowcontainer = {
                            ignoreinvisible = yes

                            icon_trait = {
                                # visible = "[Trait.GetGroup]"
                                visible = "[Not( ObjectsEqual( Trait.GetGroup, GetTraitGroup( 'elf_mortality' )))]"
                                # visible = no
                                blockoverride "icon_size"
                                {
                                    size = { 55 55 }
                                }
    
                                # blockoverride "glow_radius"
                                # {
                                #     glow_radius = 4
                                # }
                            }

                        }
                    }
                }

                dynamicgridbox = {
                    name = "traits_medium"
                    datamodel = "[TraitArrays.GetTraits]"
                    visible = "[And(GreaterThan_int32(GetDataModelSize(TraitArrays.GetTraits), '(int32)3'), LessThanOrEqualTo_int32(GetDataModelSize(TraitArrays.GetTraits), '(int32)5'))]" ### URF
                    flipdirection = yes
                    addcolumn = 35
                    addrow = 35
                    maxhorizontalslots = 5 ### URF
                    maxverticalslots = 1

                    item = {
                        flowcontainer = {
                            ignoreinvisible = yes

                            icon_trait = {
                                # visible = "[Trait.GetGroup]"
                                visible = "[Not( ObjectsEqual( Trait.GetGroup, GetTraitGroup( 'elf_mortality' )))]"
                                # visible = no
                                blockoverride "icon_size"
                                {
                                    size = { 35 35 }
                                }
    
                                blockoverride "glow_radius"
                                {
                                    glow_radius = 4
                                }
                            }

                        }
                    }
                }

                dynamicgridbox = {
                    name = "traits_small"
                    datamodel = "[TraitArrays.GetTraits]"
                    visible = "[And(GreaterThan_int32(GetDataModelSize(TraitArrays.GetTraits), '(int32)5'), LessThanOrEqualTo_int32(GetDataModelSize(TraitArrays.GetTraits), '(int32)6'))]" ### URF
                    flipdirection = yes
                    addcolumn = 28
                    addrow = 29
                    maxhorizontalslots = 6 ### URF
                    maxverticalslots = 1

                    item = {
                        flowcontainer = {
                            ignoreinvisible = yes

                            icon_trait = {
                                # visible = "[Trait.GetGroup]"
                                visible = "[Not( ObjectsEqual( Trait.GetGroup, GetTraitGroup( 'elf_mortality' )))]"
                                # visible = no
                                blockoverride "icon_size"
                                {
                                    size = { 29 29 }
                                }
    
                                blockoverride "glow_radius"
                                {
                                    glow_radius = 3
                                }
                            }

                        }
                    }
                }

                scrollbox = {
					name = "traits_scroller"
					visible = "[GreaterThan_int32(GetDataModelSize(TraitArrays.GetTraits), '(int32)6')]"
					size = { 0 55 }
					layoutpolicy_vertical = fixed
					layoutpolicy_horizontal = expanding
					scrollbarpolicy_vertical = as_needed
					blockoverride "scrollbox_margins" {
							margin = { 0 5 }
							margin_right = 10
					}
					using = Animation_Tab_Switch
					blockoverride "scrollbox_content"
					{
                        dynamicgridbox = {
                            name = "traits_tiny"
                            datamodel = "[TraitArrays.GetTraits]"
                            visible = "[GreaterThan_int32(GetDataModelSize(TraitArrays.GetTraits), '(int32)6')]" ### URF
                            flipdirection = yes
                            addcolumn = 24
                            addrow = 25
                            maxhorizontalslots = 6 ### URF
                            datamodel_wrap = 6 ### URF
                            # maxverticalslots = 2
                            maxverticalslots = 8
        
                            item = {
                                flowcontainer = {
                                    ignoreinvisible = yes

                                    icon_trait = {
                                        # visible = "[Trait.GetGroup]"
                                        visible = "[Not( ObjectsEqual( Trait.GetGroup, GetTraitGroup( 'elf_mortality' )))]"
                                        # visible = no
                                        blockoverride "icon_size"
                                        {
                                            size = { 25 25 }
                                        }
            
                                        blockoverride "glow_radius"
                                        {
                                            glow_radius = 2
                                        }
                                    }

                                }
                            }
                        }
					}
				}

                expand = {}
            }
        }
        expand = {}
    }

    type hbox_traits_list_small = hbox
    {
        layoutpolicy_horizontal = expanding

        ### URF Race Changes ###
        ed_race_icon_small = {}
        ### URF Race Changes ###

        widget = {
            layoutpolicy_horizontal = expanding
            size = { 0 55 }

            hbox = {
                name = "3_personality_traits"
                visible = "[LessThanOrEqualTo_int32(GetDataModelSize(TraitArrays.GetPersonalityTraits), '(int32)3')]"

                fixedgridbox = {
                    name = "personality_traits"
                    datamodel = "[TraitArrays.GetPersonalityTraits]"
                    flipdirection = yes
                    addcolumn = 54
                    addrow = 55
                    maxhorizontalslots = 3

                    item = {
                        icon_trait = {
                            blockoverride "icon_size"
                            {
                                size = { 55 55 }
                            }
                        }
                    }
                }

                hbox = {
                    visible = "[Not(IsDataModelEmpty(TraitArrays.GetTraits))]"
                    layoutpolicy_vertical = expanding
                    margin = { 5 10 }

                    divider_light = {
                        layoutpolicy_vertical = expanding
                    }
                }

                fixedgridbox = {
                    name = "traits_big"
                    datamodel = "[TraitArrays.GetTraits]"
                    visible = "[LessThanOrEqualTo_int32(GetDataModelSize(TraitArrays.GetTraits), '(int32)4')]"
                    flipdirection = yes
                    addcolumn = 39
                    addrow = 40
                    maxhorizontalslots = 4
                    maxverticalslots = 1

                    item = {
                        icon_trait = {
                            blockoverride "icon_size"
                            {
                                size = { 40 40 }
                            }
                        }
                    }
                }

                fixedgridbox = {
                    name = "traits_small"
                    datamodel = "[TraitArrays.GetTraits]"
                    visible = "[And(GreaterThan_int32(GetDataModelSize(TraitArrays.GetTraits), '(int32)4'), LessThanOrEqualTo_int32(GetDataModelSize(TraitArrays.GetTraits), '(int32)6'))]"
                    flipdirection = yes
                    addcolumn = 28
                    addrow = 29
                    maxhorizontalslots = 6
                    maxverticalslots = 1

                    item = {
                        icon_trait = {
                            blockoverride "icon_size"
                            {
                                size = { 29 29 }
                            }

                            blockoverride "glow_radius"
                            {
                                glow_radius = 3
                            }
                        }
                    }
                }

                fixedgridbox = {
                    name = "traits_tiny"
                    datamodel = "[TraitArrays.GetTraits]"
                    visible = "[GreaterThan_int32(GetDataModelSize(TraitArrays.GetTraits), '(int32)6')]"
                    flipdirection = yes
                    addcolumn = 24
                    addrow = 25
                    maxhorizontalslots = 7
                    datamodel_wrap = 7
                    maxverticalslots = 2

                    item = {
                        icon_trait = {
                            blockoverride "icon_size"
                            {
                                size = { 25 25 }
                            }

                            blockoverride "glow_radius"
                            {
                                glow_radius = 2
                            }
                        }
                    }
                }

                expand = {}
            }

            hbox = {
                name = "4_personality_traits"
                visible = "[GreaterThan_int32(GetDataModelSize(TraitArrays.GetPersonalityTraits), '(int32)3')]"

                fixedgridbox = {
                    name = "personality_traits"
                    datamodel = "[TraitArrays.GetPersonalityTraits]"
                    flipdirection = yes
                    addcolumn = 54
                    addrow = 55
                    maxhorizontalslots = 4

                    item = {
                        icon_trait = {
                            blockoverride "icon_size"
                            {
                                size = { 55 55 }
                            }
                        }
                    }
                }

                hbox = {
                    visible = "[Not(IsDataModelEmpty(TraitArrays.GetTraits))]"
                    layoutpolicy_vertical = expanding
                    margin = { 5 10 }

                    divider_light = {
                        layoutpolicy_vertical = expanding
                    }
                }

                fixedgridbox = {
                    name = "traits_big"
                    datamodel = "[TraitArrays.GetTraits]"
                    visible = "[LessThanOrEqualTo_int32(GetDataModelSize(TraitArrays.GetTraits), '(int32)4')]"
                    flipdirection = yes
                    addcolumn = 39
                    addrow = 40
                    maxhorizontalslots = 4
                    maxverticalslots = 1

                    item = {
                        icon_trait = {
                            blockoverride "icon_size"
                            {
                                size = { 40 40 }
                            }
                        }
                    }
                }

                fixedgridbox = {
                    name = "traits_small"
                    datamodel = "[TraitArrays.GetTraits]"
                    visible = "[And(GreaterThan_int32(GetDataModelSize(TraitArrays.GetTraits), '(int32)4'), LessThanOrEqualTo_int32(GetDataModelSize(TraitArrays.GetTraits), '(int32)6'))]"
                    flipdirection = yes
                    addcolumn = 28
                    addrow = 29
                    maxhorizontalslots = 6
                    maxverticalslots = 1

                    item = {
                        icon_trait = {
                            blockoverride "icon_size"
                            {
                                size = { 29 29 }
                            }

                            blockoverride "glow_radius"
                            {
                                glow_radius = 3
                            }
                        }
                    }
                }

                fixedgridbox = {
                    name = "traits_tiny"
                    datamodel = "[TraitArrays.GetTraits]"
                    visible = "[GreaterThan_int32(GetDataModelSize(TraitArrays.GetTraits), '(int32)6')]"
                    flipdirection = yes
                    addcolumn = 24
                    addrow = 25
                    maxhorizontalslots = 6
                    datamodel_wrap = 6
                    maxverticalslots = 2

                    item = {
                        icon_trait = {
                            blockoverride "icon_size"
                            {
                                size = { 25 25 }
                            }

                            blockoverride "glow_radius"
                            {
                                glow_radius = 2
                            }
                        }
                    }
                }

                expand = {}
            }
        }
        expand = {}
    }
}
