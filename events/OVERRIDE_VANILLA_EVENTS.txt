namespace = combat_event

# Used for determining both who should be notifiied about captured/slain combatants.
scripted_trigger combat_event_1001_character_is_relevant_to_target_trigger = {
	OR = {
		# Character is of major or minor interest.
		is_of_major_interest_trigger = {CHARACTER = $TARGET$ }
		is_of_minor_interest_trigger = {CHARACTER = $TARGET$ }

		# Courtiers normally aren't very interesting, but if one got captured in battle there has to be a reason why they were there in the first place!
		is_courtier_of = $TARGET$
		is_knight_of = $TARGET$
	}
}

# Used for checking if a captured combatant is worth war-score.
scripted_trigger combat_event_1001_character_is_important_combatant = {
	OR = {
		this = scope:primary_combat_winner
		this = scope:primary_combat_loser
		is_heir_of = scope:primary_combat_winner
		is_heir_of = scope:primary_combat_loser
	}
}

# Used to check if a knight has fought in a battle recently.
scripted_effect petition_knight_battle_history_effect = {
	if = {
		limit = {
			is_alive = yes
			age >= 35
			is_landed = no
			employer.highest_held_title_tier >= tier_kingdom # No need to set variables for knights of dukes/counts
		}
		if = {
			limit = { has_variable = hc_8170_fought_battle_for }
			remove_variable = hc_8170_fought_battle_for
		}
		if = {
			limit = { has_variable = hc_8170_fought_battle_where }
			remove_variable = hc_8170_fought_battle_where
		}
		if = {
			limit = { has_variable = hc_8170_fought_battle_against }
			remove_variable = hc_8170_fought_battle_against
		}
		set_variable = {
			name = hc_8170_fought_battle_for
			value = employer
			years = 15
		}
		set_variable = {
			name = hc_8170_fought_battle_where
			value = location
			years = 15
		}
		save_scope_as = knight_scope
		if = { # For winner side knights
			limit = {
				scope:winning_side = {
					any_side_knight = { THIS = scope:knight_scope } # this knight
				}
			}
			set_variable = {
				name = hc_8170_fought_battle_against
				value = scope:winning_side.enemy_side.side_primary_participant
				years = 15
			}
		}
		else = { # For loser side knights
			set_variable = {
				name = hc_8170_fought_battle_against
				value = scope:winning_side.side_primary_participant
				years = 15
			}
		}
	}
}

# Combat Side event which handles the combatant imprisonment and death logic.
# Also determines which characters need to be notified about these occurances, and triggers notification events for them (combat_event.1002-1004 and 1012-1014).
combat_event.1001 = {
	scope = combat_side
	hidden = yes

	trigger = {
		# Prisoners of war can only be taken during an actual war.
		# Non-war battles (such as from engaging Hostile forces) do not take prisoners, since PoWs cannot be released on war end if there is no war!
		# side_primary_participant = {
		# 	is_at_war_with = root.enemy_side.side_primary_participant
		# }

		#Cannot happen in the tutorial
		NOT = { has_global_variable = lesson_chain_war_tutorial_started }
	}

	immediate = {
		debug_log = "ENTERING combat_event.1001"

		# Save necessary scopes for later usage.
		save_scope_as = winning_side
		side_primary_participant = {
			random_character_war = {
				limit = {
					OR = {
						is_attacker = root.enemy_side.side_primary_participant
						is_defender = root.enemy_side.side_primary_participant
					}
				}
				save_scope_as = combat_war
				if = {
					limit = {
						is_attacker = root.side_primary_participant
					}
					primary_attacker = {
						save_scope_as = primary_combat_winner
					}
					primary_defender = {
						save_scope_as = primary_combat_loser
					}
				}
				else = {
					primary_defender = {
						save_scope_as = primary_combat_winner
					}
					primary_attacker = {
						save_scope_as = primary_combat_loser
					}
				}
			}
			save_scope_as = combat_winner
		}
		enemy_side.side_primary_participant = {
			save_scope_as = combat_loser
		}
		combat.location = {
			save_scope_as = combat_location
		}

		# If there is a Commander on the losing side, check if they should be imprisoned.
		if = {
			limit = {
				exists = enemy_side.side_commander

				side_primary_participant = {
					is_at_war_with = root.enemy_side.side_primary_participant
				}
			}

			enemy_side.side_commander = {
				random_list = {
					# No Effect
					90 = {
						# Reduced risk for characters with the Stalwart Leader perk.
						modifier = {
							add = 100
							has_perk = stalwart_leader_perk
							is_ai = no
						}
						modifier = {
							add = 30
							has_perk = stalwart_leader_perk
							is_ai = yes
						}

						#Reduced risk for character with Bodyguard(s) that are fighting by their side
						modifier = {
							add = 50
							employs_court_position = bodyguard_court_position
							any_court_position_holder = {
								type = bodyguard_court_position
								save_temporary_scope_as = bodyguard
								root.enemy_side = {
									any_side_knight = { this = scope:bodyguard }
								}
							}
						}

						#Reduced risk for character with Garuda that are fighting by their side
						modifier = {
							add = 50
							employs_court_position = garuda_court_position
							any_court_position_holder = {
								type = garuda_court_position
								save_temporary_scope_as = garuda
								root.enemy_side = {
									any_side_knight = { this = scope:garuda }
								}
							}
						}

						# Being stackwiped greatly increases the chance of capture.
						modifier = {
							scope:wipe = yes
							factor = 0.20
						}
					}
					# Captured in battle.
					10 = {
						trigger = {
							is_alive = yes
						}
						modifier = {
							factor = { # Prowess directly reduces chance of capture.
								value = 30 # Value at which 'immunity' happens.
								subtract = prowess
								divide = 30
								min = 0.1 # Everyone makes mistakes.
							}
						}

						# Craven characters are more likey to flee earlier and elude capture.
						modifier = {
							factor = 0.5
							has_trait = craven
						}
						modifier = {
							factor = 2
							has_trait = brave
						}

						# Certain injuries increase the chances of being caught.
						modifier = {
							factor = 3
							OR = {
								has_trait = one_legged
								has_trait = maimed
							}
						}

						# State Ransoms: characters are more likely to surrender if their liege will pay their ransom.
						modifier = {
							factor = 2
							liege.culture = { has_cultural_parameter = knights_die_less_but_are_captured_more }
							NOT = { is_independent_ruler = yes }
						}
						
						add_to_list = prisoners_of_war

						# Log a battle event so that the imprisonment shows up in the battle summary screen.
						save_temporary_scope_as = this_combatant
						root = {
							battle_event = {
								key = "combatant_captured_in_battle"
								left_portrait = scope:combat_winner
								right_portrait = scope:this_combatant
								type = imprison
							}
						}
					}
					# Commanders cannot be slain in the retreat phase, since we don't want to punish players for retreating from combat after they get wounded.
				}
			}
		}

		# Set history variables for petition events
		every_side_knight = { petition_knight_battle_history_effect = yes }

		# For each Knight on the losing side, check if they should be imprisoned/slain.
		enemy_side = {
			every_side_knight = {
				random_list = {
					85 = { # Nothing Happens
						trigger = {
							is_alive = yes
						}
						modifier = {
							add = 50
							has_perk = stalwart_leader_perk
							is_ai = no
						}
						modifier = {
							add = 15
							has_perk = stalwart_leader_perk
							is_ai = yes
						}

						#Reduced risk for character with bodyguards that are fighting by their side
						modifier = {
							add = 25
							employs_court_position = bodyguard_court_position
							any_court_position_holder = {
								type = bodyguard_court_position
								save_temporary_scope_as = bodyguard
								root.enemy_side = {
									any_side_knight = { this = scope:bodyguard }
								}
							}
						}

						#Reduced risk for character with Garuda that are fighting by their side
						modifier = {
							add = 25
							employs_court_position = garuda_court_position
							any_court_position_holder = {
								type = garuda_court_position
								save_temporary_scope_as = garuda
								root.enemy_side = {
									any_side_knight = { this = scope:garuda }
								}
							}
						}

						# Being stackwiped greatly increases the chance of capture and/or death.
						modifier = {
							scope:wipe = yes
							factor = 0.20
						}
					}
					10 = { # Imprisonment
						trigger = {
							is_alive = yes
							side_primary_participant = {
								is_at_war_with = root.enemy_side.side_primary_participant
							}
						}

						modifier = {
							factor = { # Prowess directly reduces chance of capture
								value = 30 # Value at which 'immunity' happens
								subtract = prowess
								divide = 30
								min = 0.1 # Everyone makes mistakes.
							}
						}
						modifier = {
							factor = 2
							has_trait = brave
						}
						modifier = {
							factor = 0.5
							has_trait = craven
						}
						modifier = {
							factor = 2
							OR = {
								has_trait = one_legged
								has_trait = disfigured
								has_trait = one_eyed
								has_trait = maimed
							}
						}

						# State Ransoms: characters are more likely to surrender if their liege will pay their ransom.
						modifier = {
							factor = 2
							liege.culture = { has_cultural_parameter = knights_die_less_but_are_captured_more }
						}

						# Transfer equipped armor and weapon to winner if durability not too low
						combat_transfer_equipped_artifact_effect = { TYPE = primary_armament OWNER = scope:combat_winner }
						combat_transfer_equipped_artifact_effect = { TYPE = armor OWNER = scope:combat_winner }

						add_to_list = prisoners_of_war
						
						# Log a battle event so that the imprisonment shows up in the battle summary screen.
						save_temporary_scope_as = this_combatant
						root = {
							battle_event = {
								key = "combatant_captured_in_battle"
								left_portrait = scope:combat_winner
								right_portrait = scope:this_combatant
								type = imprison
								target_right = yes
							}
						}
					}
					5 = { # Death
						trigger = {
							is_alive = yes # Don't kill knights who are already dead! They will be accounted for later.
						}

						# Modifiers influencing chance to occur.
						modifier = {
							factor = { # Prowess directly reduces chance of capture
								value = 40 # Value at which 'immunity' happens
								subtract = prowess
								divide = 40
								min = 0.1 # Everyone makes mistakes.
							}
						}

						# Craven characters are more likely to flee before they can be slain.
						modifier = {
							factor = 0.5
							has_trait = craven
						}
						modifier = {
							factor = 2
							OR = {
								has_trait = brave
								has_trait = heroic
							}
						}
						
						# Increased chance of dying the more wounded a character is.
						modifier = {
							factor = 2
							OR = {
								has_trait = one_legged
								has_trait = disfigured
								has_trait = one_eyed
								has_trait = maimed
							}
						}
						modifier = {
							factor = 1.5
							has_trait_rank = {
								trait = wounded
								rank = 1
							}
						}
						modifier = {
							factor = 2
							has_trait_rank = {
								trait = wounded
								rank = 2
							}
						}
						modifier = {
							factor = 3
							has_trait_rank = {
								trait = wounded
								rank = 3
							}
						}

						save_died_in_battle_variables_effect = {
							ENEMY = scope:combat_winner
							LEADER = scope:combat_loser
							LOCATION = scope:combat_location
						}

						# State Ransoms: characters are more likely to surrender if their liege will pay their ransom, which makes them less likely to die.
						modifier = {
							factor = 0.5
							liege.culture = { has_cultural_parameter = knights_die_less_but_are_captured_more }
						}

						# For messaging purposes.
						add_to_list = slain_combatants

						# Log a battle event so that the imprisonment shows up in the battle summary screen.
						save_temporary_scope_as = this_combatant

						# Get a random valid knight to be the killer.
						scope:winning_side = {
							random_side_knight = {
								limit = {
									this.prowess >= scope:this_combatant.prowess_for_combat_event_opponent
								}

								weight = {
									base = 1

									compare_modifier = {
										value = this.prowess
									}

									modifier = {
										factor = 10
										this.prowess > scope:this_combatant.prowess
									}
								}

								save_scope_as = enemy_knight
							}
						}

						# Log the battle event and then kill the knight
						if = {
							limit = {
								exists = scope:enemy_knight
							}
							# Transfer equipped armor and weapon to killer if durability not too low
							combat_transfer_equipped_artifact_effect = { TYPE = primary_armament OWNER = scope:enemy_knight }
							combat_transfer_equipped_artifact_effect = { TYPE = armor OWNER = scope:enemy_knight }
							root = {
								battle_event = {
									key = "combatant_killed_in_battle"
									left_portrait = scope:enemy_knight
									right_portrait = scope:this_combatant
									type = death
									target_right = yes
								}
							}

							debug_log = "ADDING SLAYER MEMORY"
							# debug_log_scopes = yes
							scope:enemy_knight = {
								create_character_memory = {
									type = slayed_knight_in_battle
									participants = {
										slayed_knight = scope:this_combatant
									}
								}
							}

							death = {
								death_reason = death_battle
								killer = scope:enemy_knight
							}
						}
						else = {
							root = {
								battle_event = {
									key = "combatant_killed_in_battle_no_killer"
									left_portrait = scope:combat_winner
									right_portrait = scope:this_combatant
									type = death
									target_right = yes
								}
							}

							death = {
								death_reason = death_battle
							}
						}
						clear_saved_scope = enemy_knight
					}
					0 = {
						# If the knight is already dead, don't do anything (yet).
					}
				}
				petition_knight_battle_history_effect = yes # Set history variables for petition events
			}
			# Add the enemy knights which were killed before the end of the battle to the casualties list.
			every_in_list = {
				variable = slain_side_knights
				add_to_list = slain_combatants
			}
			clear_variable_list = slain_side_knights
		}
		
		# Also record who already died on the winning side, so the victor knows their own casualty count.
		scope:winning_side = {
			every_in_list = {
				variable = slain_side_knights
				add_to_list = victorious_slain_combatants
			}
			clear_variable_list = slain_side_knights
		}


		# Handle effects & messaging for any slain combatants.
		if = {
			limit = {
				OR = {			
					any_in_list = {
						list = slain_combatants
						exists = this
					}
					any_in_list = {
						list = victorious_slain_combatants
						exists = this
					}
				}
			}
			# If anyone was slain after the battle, send a message to both the winner and loser of the combat to inform them of this.
			scope:combat_winner = {
				trigger_event = combat_event.1012
			}
			scope:combat_loser = {
				trigger_event = combat_event.1013
			}

			# Send a message to all other players who may be concerned about the fate of the slain combatants.
			every_player = {
				limit = {
					NOR = {
						this = scope:combat_winner
						this = scope:combat_loser
					}

					save_temporary_scope_as = notification_target

					OR = {				
						any_in_list = {
							list = slain_combatants
							combat_event_1001_character_is_relevant_to_target_trigger = { TARGET = scope:notification_target }
						}
						any_in_list = {
							list = victorious_slain_combatants
							combat_event_1001_character_is_relevant_to_target_trigger = { TARGET = scope:notification_target }
						}
					}
				}
				trigger_event = combat_event.1014
			}
		}

		# Handle effects & messaging for any captured combatants (must be done after slain combatants for order-of-operations reasons!).
		if = {
			limit = {
				any_in_list = {
					list = prisoners_of_war
					exists = this
				}
			}
			# If anyone was captured after the battle, send a message to both the winner and loser of the combat to inform them of this.
			scope:combat_winner = {
				trigger_event = combat_event.1002
			}
			scope:combat_loser = {
				trigger_event = combat_event.1003
			}
			# Send a message to all other players who may be concerned about the fate of the captured prisoners.
			every_player = {
				limit = {
					NOR = {
						this = scope:combat_winner
						this = scope:combat_loser
					}

					save_temporary_scope_as = notification_target
					any_in_list = {
						list = prisoners_of_war

						combat_event_1001_character_is_relevant_to_target_trigger = { TARGET = scope:notification_target }
					}
				}
				trigger_event = combat_event.1004
			}
		}		
	}
}