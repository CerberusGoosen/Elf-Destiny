namespace = aeluran_diarchy

# Aeluran Matriarch assigns new Adviser, sends letter
aeluran_diarchy.100 = {
	type = letter_event
	opening = aeluran_diarchy.100.title
	
	desc = {
		desc = aeluran_diarchy.100.desc
		first_valid = {
			triggered_desc = {
				trigger = { 
					scope:adviser_type = flag:vassal
				}
				desc = aeluran_diarchy.100.desc.vassal
			}
			triggered_desc = {
				trigger = { 
					scope:adviser_type = flag:courtier
				}
				desc = aeluran_diarchy.100.desc.courtier
			}
			triggered_desc = {
				trigger = { 
					scope:adviser_type = flag:sent_from_deepwood
				}
				desc = aeluran_diarchy.100.desc.sent_from_deepwood
			}
		}
	}

	sender = scope:aeluran_matriarch

	trigger = {
		# any_living_character = { # can we do better? make religious title and find holder?
		# 	has_trait = aeluran_high_matriarch
		# }
		NOT = {
			has_character_flag = aeluran_adviser_is_on_the_way
		}
	}

	# cooldown = { years = 1 } # is this global?

	immediate = {
		debug_log = "WE IN"
		debug_log_scopes = yes
		random_living_character = {
			limit = {
				has_trait = aeluran_high_matriarch
			}
			
			save_scope_as = aeluran_matriarch
		}

		if = {
			limit = {
				any_vassal = {
					is_aeluran_sister_or_higher = yes
				}
			}

			save_scope_value_as = {
				name = adviser_type
				value = flag:vassal
			}

			random_vassal = {
				limit = {
					is_aeluran_sister_or_higher = yes
				}

				save_scope_as = aeluran_sister_advisor
			}

		}
		else_if = {
			limit = {
				any_courtier = {
					is_aeluran_sister_or_higher = yes
				}
			}

			save_scope_value_as = {
				name = adviser_type
				value = flag:courtier
			}

			random_courtier = {
				limit = {
					is_aeluran_sister_or_higher = yes
				}

				save_scope_as = aeluran_sister_advisor
			}
		}
		else_if = {
			limit = {
				NOR = {
					any_courtier = {
						is_aeluran_sister_or_higher = yes
					}
					any_vassal = {
						is_aeluran_sister_or_higher = yes
					}
				}
			}

			save_scope_value_as = {
				name = adviser_type
				value = flag:sent_from_deepwood
			}

			save_scope_value_as = {
				name = aeluran_adviser_coming_from_sanctum
				value = yes
			}

			if = {
				limit = {
					exists = scope:aeluran_matriarch
				}
				create_aeluran_advisor_effect = { MATRIARCH = scope:aeluran_matriarch }
			}
		}

	}

	option = {
		name = aeluran_diarchy.100.ok

		debug_log_scope = yes

		if = {
			limit = {
				exists = scope:aeluran_sister_advisor
			}

			if = {
				limit = {
					exists = scope:aeluran_adviser_coming_from_sanctum
					scope:aeluran_adviser_coming_from_sanctum = yes
				}
				add_character_flag = {
					flag = aeluran_adviser_is_on_the_way
					years = 4
				}

				save_scope_as = lord_receiving_adviser

				aeluran_adviser_sent_from_deep_wood_effect = yes
			}
			else = {
				trigger_event = aeluran_diarchy.101
			}

		}
	}
}

# Adviser Arrives

# TODO: make cost of new constructed church holding scale by aeluran respect level
# If new adviser is vassal with land already just convert them to Aeluran Government (in theory they probably should already be aeluran government)

aeluran_diarchy.101 = {
	type = character_event
	title = aeluran_diarchy.101.title
	desc = aeluran_diarchy.101.desc

	left_portrait = {
		character = root
		animation = worry
	}
	right_portrait = {
		character = scope:aeluran_sister_advisor
		animation = personality_zealous
	}

	theme = court
	content_source = elf_destiny

	# cooldown = { years = 1 }

	immediate = {
		debug_log = "start aeluran regency"
		debug_log_scopes = yes

		remove_character_flag = aeluran_adviser_is_on_the_way

		# make regent/adviser
		if = {
			limit = {
				scope:aeluran_sister_advisor = {
					is_ruler = no
					NOT = {
						is_courtier_of = root
					}
				}
			}
			add_courtier = scope:aeluran_sister_advisor
		}

		if = {
			limit = {
				has_active_diarchy = no
			}
			start_diarchy = aeluran_regency
		}

		set_diarch = scope:aeluran_sister_advisor

		if = {
			limit = {
				scope:aeluran_sister_advisor = {
					is_ruler = yes
				}
				NOT = {
					has_government = aeluran_weavers_government
				}
			}
			scope:aeluran_sister_advisor = {
				change_government = aeluran_weavers_government
			}
		}
	}

	option = {
		name = aeluran_diarchy.101.ok

		if = {
			limit = {
				scope:aeluran_sister_advisor = {
					is_ruler = no
				}
			}
			trigger_event = aeluran_diarchy.103
		}

		trigger_event = {
			id = aeluran_diarchy.102
			days = { 730 1460 }
		}
	}
}

# regent task management
aeluran_diarchy.102 = {
	hidden = yes

	trigger = {
		has_active_diarchy = yes
		# Because we were apparently occasionally catching gaps in diarch succession.
		exists = diarch
	}

	immediate = {
		# We don't have fine control of mandates yet, so we just randomly pick a pool and push from it.
		if = {
			limit = {
				# Filtering out landless lieges, since they're too much to control for.
				is_landed = yes
			}
			diarch = {

				# We should have events get passed to diarch, who then auto-handles as AI or manually as player
				
				# maybe we should just create a story for the diarch? or add to existing one
				### Here we should put all of the events that arent specific to a realm management level, although management MAY effect severity
				
				# Loyalty Trait Shift
				# Country Control Gains
				# Tax and Levy modifier gain
				# Find Secrets

				# matter of fact, having seperate on-action pools may be compeltely unneeded
				# - could make new pools that focus on aspects though like "succession meddling"

				# trigger_event = { on_action = diarchy_mandate_realm_supervision_random }
				random_list = {
					100 = {
						trigger = { has_active_mandate = realm_supervision }

						# Here maybe add the +1 domain limit character modifier!

						trigger_event = { on_action = diarchy_mandate_realm_supervision_random }
					}
					100 = {
						trigger = { has_active_mandate = realm_subjugation }
						trigger_event = { on_action = diarchy_mandate_realm_subjugation_random }
					}
					100 = {
						trigger = { has_active_mandate = realm_domination }
						trigger_event = { on_action = diarchy_mandate_realm_domination_random }
					}
				}
			}
		}
		trigger_event = {
			id = aeluran_diarchy.102
			days = { 730 1460 }
		}

		# We can also potentially run the negative side effects as a seperate chain

	}
}


# aeluran_diarchy.1101 = {

# }

# Aeluran demands land
aeluran_diarchy.103 = {
	type = character_event
	title = aeluran_diarch.103.title
	desc = aeluran_diarch.103.desc
	# if first aeluran adviser, find a new church holding to take.
	# assign that barony to ruler as character variable
	# on aeluran death, holding returns to leige
	# new adviser automatically settles old barony and depending on respect, maybe other lands

	# if leige gives away county with an adviser, adviser angrily seizes new land
	# if aeluran cant be landed, leige suffers a penalty modifier until its rectified

	# for tribal, just say the order sponsors the holding construction

	left_portrait = {
		character = root
		animation = worry
	}
	right_portrait = {
		character = scope:aeluran_sister_advisor
		animation = personality_zealous
	}

	immediate = {
		random_sub_realm_barony = {
			limit = {
				title_province = {
					# has_holding = no
					# holder = root
					has_holding_type = church_holding
				}
				county_controller = root

			}

			save_scope_as = church_barony_1
		}

		if = {
			limit = {
				exists = scope:church_barony_1
			}

			random_sub_realm_barony = {
				limit = {
					title_province = {
						# has_holding = no
						# holder = root
						has_holding_type = church_holding
					}
					county_controller = root
				}
	
				save_scope_as = church_barony_2
			}
		}

		if = {
			limit = {
				exists = scope:church_barony_2
			}

			random_sub_realm_barony = {
				limit = {
					title_province = {
						# has_holding = no
						# holder = root
						has_holding_type = church_holding
					}
					county_controller = root
				}
	
				save_scope_as = church_barony_3
			}
		}

		if = {
			limit = {
				# NOT = {
				# 	exists = scope:target_church_barony
				# }
			}

			random_realm_province = {
				limit = {
					has_holding = no
					county_controller = root
				}

				save_scope_as = undeveloped_holding
			}
			
		}

			# begin_create_holding
			# any_realm_province
			# any_directly_owned_province
	}

	option = {
		name = aeluran_diarch.103.church_1
		trigger = {
			exists = scope:church_barony_1
		}

		create_title_and_vassal_change = {
			type = granted
			save_scope_as = title_change
			add_claim_on_loss = no
		}
		scope:church_barony_1 = {
			change_title_holder = {
				holder = scope:aeluran_sister_advisor
				change = scope:title_change
			}
		}
		resolve_title_and_vassal_change = scope:title_change

		scope:aeluran_sister_advisor = {
			change_government = aeluran_weavers_government
		}
	}

	option = {
		name = aeluran_diarch.103.church_2
		trigger = {
			exists = scope:church_barony_2
		}

		create_title_and_vassal_change = {
			type = granted
			save_scope_as = title_change
			add_claim_on_loss = no
		}
		scope:church_barony_2 = {
			change_title_holder = {
				holder = scope:aeluran_sister_advisor
				change = scope:title_change
			}
		}
		resolve_title_and_vassal_change = scope:title_change

		scope:aeluran_sister_advisor = {
			change_government = aeluran_weavers_government
		}
	}

	option = {
		name = aeluran_diarch.103.church_3
		trigger = {
			exists = scope:church_barony_3
		}

		create_title_and_vassal_change = {
			type = granted
			save_scope_as = title_change
			add_claim_on_loss = no
		}
		scope:church_barony_3 = {
			change_title_holder = {
				holder = scope:aeluran_sister_advisor
				change = scope:title_change
			}
		}
		resolve_title_and_vassal_change = scope:title_change

		scope:aeluran_sister_advisor = {
			change_government = aeluran_weavers_government
		}
	}

	option = {
		name = aeluran_diarch.103.undeveloped_holding
		trigger = {
			exists = scope:undeveloped_holding
		}

		scope:undeveloped_holding = {
			begin_create_holding = {
				type = church_holding
			}
		}

		trigger_event = {
			id = aeluran_diarchy.1031
			days = 1826
		}
	}

	# let player know they have 1 year to find holding or consequences
	option = { # I will assign you land
		name = aeluran_diarch.103.will_asign
	}

}

aeluran_diarchy.1031 = {
	type = character_event
	title = aeluran_diarch.1031.title
	desc = aeluran_diarch.1031.desc
	# if first aeluran adviser, find a new church holding to take.
	# assign that barony to ruler as character variable
	# on aeluran death, holding returns to leige
	# new adviser automatically settles old barony and depending on respect, maybe other lands

	# if leige gives away county with an adviser, adviser angrily seizes new land
	# if aeluran cant be landed, leige suffers a penalty modifier until its rectified

	# for tribal, just say the order sponsors the holding construction

	left_portrait = {
		character = root
		animation = worry
	}
	right_portrait = {
		character = scope:aeluran_sister_advisor
		animation = personality_zealous
	}

	option = {
		name = aeluran_diarch.1031.ok

		create_title_and_vassal_change = {
			type = granted
			save_scope_as = title_change
			add_claim_on_loss = no
		}
		scope:undeveloped_holding.barony  = {
			change_title_holder = {
				holder = scope:aeluran_sister_advisor
				change = scope:title_change
			}
		}
		resolve_title_and_vassal_change = scope:title_change

		scope:aeluran_sister_advisor = {
			change_government = aeluran_weavers_government
		}
	}
}


# Once landed Aeluran changes to aeleuran government
# aeluran_diarchy.104 = { # Change Government To Aeluran
# 	type = character_event
# 	title = aeluran_repeating.003.title
# 	desc = aeluran_repeating.003.desc

# 	theme = culture_change
# 	content_source = elf_destiny

# 	right_portrait = {
# 		character = root
# 		animation = celebrate_axe
# 	}

# 	option = {
# 		name = aeluran_repeating.003.a
# 		change_government = advanced_tribal_government
# 		every_vassal = {
# 			if = {
# 				limit = {
# 					OR = {
# 						government_has_flag = government_is_tribal
# 						AND = {
# 							culture = {
# 								has_cultural_parameter = form_advanced_tribal_government
# 							}
# 							NOT = {
# 								government_has_flag = government_is_advanced_tribal
# 							}
# 						}
# 					}
# 				}
# 				change_government = advanced_tribal_government
# 			}
# 		}
# 	}
# }