namespace = aeluran_matchmaking

## HUGE TODO ## - Grand Wedding Implementation

# - TODO: When Player has a shot at a genetic trait of prophecy the advisor should guide them torwards that
# - TODO: Aeluran Advisor puts themself forward as candidate, event chain
# - TODO: Special high matraiarch pairing event chain


# Current Workflow
# - Checks which possiblities are available
# - rigidly decides to assign description blocks
# - rigidly assigns portraits

# Work towards a new random selector!
# random_list = {
# 	0 = {
# 		modifier = {
# 			add = x # rarity
# 			is_this_match_type_available
# 		}
# 	}
# }

# we really should ALWAYS have three options
	# - if need be, generate a second or even third standard match
# maybe have it go through the random_list three times, each time if a selction has already been picked, its modifier stays 0

aeluran_matchmaking.101 = {
	type = character_event
	title = aeluran_matchmaking.101.title
	desc = {
		desc = aeluran_matchmaking.101.desc
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:lord_or_heir
					scope:lord_or_heir = flag:lord
				}
				desc = aeluran_matchmaking.101.desc.lord
			}
			triggered_desc = {
				trigger = {
					exists = scope:lord_or_heir
					scope:lord_or_heir = flag:heir
				}
				desc = aeluran_matchmaking.101.desc.heir
			}
		}
	}

	theme = aeluran_standard
	override_background = { reference = council_chamber }
	content_source = elf_destiny

	left_portrait = {
		trigger = { exists = scope:match_recipient }
		character = scope:match_recipient
		animation = worry
	}
	right_portrait = {
		trigger = { exists = scope:host }
		character = scope:host
		animation = flirtation
	}

	immediate = {
		if = {
			limit = {
				exists = scope:match_recipient
			}
			if = {
				limit = {
					scope:match_recipient = root
				}
				save_scope_value_as = {
					name = lord_or_heir
					value = flag:lord
				}
			}
			else_if = {
				limit = {
					scope:match_recipient = {
						is_heir_of = root
					}
				}
				save_scope_value_as = {
					name = lord_or_heir
					value = flag:heir
				}
			}
		}
		else = {
			debug_log = "NO MATCH RECIPIENT!!"
		}
	}

	option = { # Begin Matchmaking
		name = aeluran_matchmaking.101.ok
		add_to_activity = scope:host.involved_activity


		debug_log = "DID I SET?"
	}

	option = { # I will put this off for 5 years
		name = aeluran_matchmaking.101.snooze
		if = {
			limit = {
				exists = scope:activity
			}
			decline_activity_invite = scope:activity
		}

		# Piety Penalty
	}

	option = { # Dont attempt to matchmake me or my heir again
		name = aeluran_matchmaking.101.never_again
		if = {
			limit = {
				exists = scope:activity
			}
			decline_activity_invite = scope:activity
		}

		# Piety Penalty
		# Battle of Wills
			# win they listen
			# lost they suggest their lord is not himself and needs a nap. They will ask again in a years time
	}
}

### Match Making ###
aeluran_matchmaking.002 = {
	hidden = yes

	immediate = {
		debug_log = "BEGAN MATCHMAKING EVENTS"

		# Aeluran Respect may not be enough here
		# Current Aeluran Dominance levels help, but lets create a mult-factor break down
			## Match Quality Multiplier Score INCUDES ##
			# - Current Aeluran Respect
			# - Current Aeluran Domination Level
			# - Title Rank
			# - Elf Tier
			# - Bonus from gifting Spark Crystal

		### MAYBE:
			# RESPECT: Quality of Matches
			# DOMINATION LEVEL: 
				# - Number Of Options
				# also inversely more domination leads to stronger quality matches?
			


		### WIP TODO: Adding checks to the options is all well and good but we should only be presenting options that are possible
		# - could try to find all possible matches and then randomly pick fully possible ones
		#   - Downside: would be creating alot of chatachters that would never be used.
		#   - really all we need to do is check if FAMILY and ALLIANCE exist or not....

		# additional bug: real people have a chance to be selected for breeding stock, if they were not randomly generated then we need to make sure they are not deleted
		# need to check if family optione xists before using that matchmaking event

		# LOG DEBUG

		#TODO: Having worse domination should actually increase the quality of matches! If the order has more control they can give better matches
		# TODO: How about we use High Matriarch Opinion!
		# TODO: alliance option seemed to only ally with child and not their lord parent!

		determine_aeluran_respect_score = yes
		determine_match_candidate_count = yes

		# matchmaking_candidate_quality

		generate_matchmaking_candidates_effect = yes
		debug_log = matchmaking_debug_match_options

		# debug_log_scopes = yes

		trigger_event = aeluran_matchmaking.0021
	}
}

# # TESTING EVENT WINDOW!
# aeluran_matchmaking.0022 = {
# 	title = aeluran_matchmaking.0021.title
# }

# Aeluran welcome to matchmaking
aeluran_matchmaking.0021 = {
	type = activity_event
	title = aeluran_matchmaking.0021.title

	# Domination will reduce choices to two/one at lower levels
	# Respect effects quality

	desc = {
		desc = aeluran_matchmaking.0021.desc
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:activity.special_guest:match_recipient
					scope:activity.special_guest:match_recipient = root
				}
				desc = aeluran_matchmaking.0021.desc.lord
			}
			triggered_desc = {
				trigger = {
					exists = scope:activity.special_guest:match_recipient
					scope:activity.special_guest:match_recipient = {
						is_heir_of = root
					}
				}
				desc = aeluran_matchmaking.0021.desc.heir
			}
		}
		desc = aeluran_matchmaking.0021.desc.stats
	}

	window = tour_arrival_event
	theme = aeluran_standard
	content_source = elf_destiny

	left_portrait = {
		character = root
		animation = personality_content
	}
	center_portrait = {
		trigger = { 
			exists = scope:activity.special_guest:match_recipient
			NOT = {
				root = scope:activity.special_guest:match_recipient
			}
		}
		character = scope:activity.special_guest:match_recipient
		animation = worry
	}
	right_portrait = {
		trigger = { exists = scope:host }
		character = scope:host
		animation = personality_content
	}

	immediate = {
		scope:host = {
			save_scope_as = aeluran_adviser
		}

		debug_log_scopes = yes
	}

	option = {
		name = aeluran_matchmaking.0021.ok
		trigger_event = aeluran_matchmaking.0022
	}
}

# TODO: if not triplets, you should add adviser showing off all the candidates
# TODO: same character twice!
	# - also in general the bastard claimant match should be once per match max
# TODO: if dont have family tenet, make sure family is not an option

# First Candidate
aeluran_matchmaking.0022 = {
	type = activity_event
	title = aeluran_matchmaking.0022.title
	desc = aeluran_matchmaking.0022.desc.lord

	theme = aeluran_standard
	content_source = elf_destiny

	left_portrait = {
		trigger = { exists = scope:left_portrait_match }
		character = scope:left_portrait_match
		animation = personality_content
	}
	center_portrait = {
		trigger = { exists = scope:center_portrait_match }
		character = scope:center_portrait_match
		animation = flirtation
	}
	right_portrait = {
		trigger = { exists = scope:right_portrait_match }
		character = scope:right_portrait_match
		animation = personality_content
	}

	immediate = {
		map_match_candidate_type = { MATCH_TYPE = scope:match_choice_1_type}
		map_match_candidate = { MATCH_CHOICE = scope:match_choice_1 }

		assign_matchmaking_candidate_portraits_effect = { MATCHID = 1 }

		debug_log_scopes = yes
	}

	option = {
		name = aeluran_matchmaking.0022.ok

		if = {
			limit = {
				NOT = {
					scope:match_choice_1_type = flag:twins
					scope:match_choice_1_type = flag:triplets
				}
			}
			trigger_event = aeluran_matchmaking.0023
		}
		else = {
			trigger_event = aeluran_matchmaking.0024
		}
	}
}

# Second Candidate
aeluran_matchmaking.0023 = {
	type = activity_event
	title = aeluran_matchmaking.0023.title
	desc = aeluran_matchmaking.0023.desc.lord

	theme = aeluran_standard
	content_source = elf_destiny

	left_portrait = {
		trigger = { exists = scope:left_portrait_match }
		character = scope:left_portrait_match
		animation = personality_content
	}
	center_portrait = {
		trigger = { exists = scope:center_portrait_match }
		character = scope:center_portrait_match
		animation = flirtation
	}
	right_portrait = {
		trigger = { exists = scope:right_portrait_match }
		character = scope:right_portrait_match
		animation = personality_content
	}

	immediate = {
		map_match_candidate_type = { MATCH_TYPE = scope:match_choice_2_type}
		map_match_candidate = { MATCH_CHOICE = scope:match_choice_2 }

		assign_matchmaking_candidate_portraits_effect = { MATCHID = 2 }
	}

	option = {
		name = aeluran_matchmaking.0023.ok

		if = {
			limit = {
				NOT = {
					scope:match_choice_2_type = flag:twins
				}
			}
			trigger_event = aeluran_matchmaking.0024
		}
		else = {
			trigger_event = aeluran_matchmaking.0025
		}
	}
}

# Third Candidate
aeluran_matchmaking.0024 = {
	type = activity_event
	title = aeluran_matchmaking.0024.title
	desc = aeluran_matchmaking.0024.desc.lord

	theme = aeluran_standard
	content_source = elf_destiny

	left_portrait = {
		trigger = { exists = scope:left_portrait_match }
		character = scope:left_portrait_match
		animation = personality_content
	}
	center_portrait = {
		trigger = { exists = scope:center_portrait_match }
		character = scope:center_portrait_match
		animation = flirtation
	}
	right_portrait = {
		trigger = { exists = scope:right_portrait_match }
		character = scope:right_portrait_match
		animation = personality_content
	}

	immediate = {
		map_match_candidate_type = { MATCH_TYPE = scope:match_choice_3_type}
		map_match_candidate = { MATCH_CHOICE = scope:match_choice_3 }

		assign_matchmaking_candidate_portraits_effect = { MATCHID = 3 }
	}

	option = {
		name = aeluran_matchmaking.0024.ok
		trigger_event = aeluran_matchmaking.0025
	}
}

### Match Making Choose Candidates Event Window ###
aeluran_matchmaking.0025 = {
	type = activity_event
	title = aeluran_matchmaking.0025.title
	desc = aeluran_matchmaking.0025.desc
	
	window = tour_arrival_event
	theme = aeluran_standard
	content_source = elf_destiny

	left_portrait = {
		trigger = { exists = scope:left_portrait_match }
		character = scope:left_portrait_match
		animation = personality_content
	}
	center_portrait = {
		trigger = { exists = scope:center_portrait_match }
		character = scope:center_portrait_match
		animation = flirtation
	}
	right_portrait = {
		trigger = { exists = scope:right_portrait_match }
		character = scope:right_portrait_match
		animation = personality_content
	}
	lower_center_portrait = {
		trigger = { exists = scope:lower_center_portrait_match }
		character = scope:lower_center_portrait_match
		animation = personality_content
	}
	lower_left_portrait = {
		trigger = { exists = scope:lower_left_portrait_match }
		character = scope:lower_left_portrait_match
		animation = personality_content
	}

	immediate = {

		debug_log = "yee aeluran_matchmaking.0021"

		assign_matchmaking_candidate_portraits_final_selection_effect = yes

		# NEW WORKFLOW
		# - you have three match_choice_x_type
		# - each with a scope match_choice_X / match_choice_X_X for multis

		# WE NEED
		# - to assign portraits
		# - to assign option names
			# - custom loc file?
		# - to assign event descriptions
			# - custom loc file?
		# - on selection marry spouse
		# - on selection clean up newly generated characters

		# debug_log_scopes = yes


	}

	# # Now Choose Your Spouse
	option = { # match_choice_1
		trigger = {
			exists = scope:match_choice_1
		}

		name = aeluran_matchmaking.0025.option_1

		highlight_portrait = scope:match_choice_1

		scope:match_choice_1 = {
			save_scope_as = selected_match_choice
		}

		selection_option_bonus_effects = { MATCH_CHOICE_TYPE = scope:match_choice_1_type }

		ai_chance = {
			base = 50
		}
		
		# new reasons can be made for the UI in character_event.gui line 1189
		# could put match icon then tool tip has 
		# a short desc - "A mighty warrior"
		# Match Stats - "Rarity:Rare , Match Quality: Top Quality (5)"

		# reason = friend
		# reason = faith
		# reason = activity_intent
		# reason = piety_level
		# reason = prestige_level
	}

	option = { # match_choice_2
		trigger = {
			exists = scope:match_choice_2
		}

		name = aeluran_matchmaking.0025.option_2

		highlight_portrait = scope:match_choice_2

		scope:match_choice_2 = {
			save_scope_as = selected_match_choice
		}

		selection_option_bonus_effects = { MATCH_CHOICE_TYPE = scope:match_choice_2_type }

		ai_chance = {
			base = 50
		}

	}

	option = { # match_choice_3
		trigger = {
			exists = scope:match_choice_3
		}

		name = aeluran_matchmaking.0025.option_3

		highlight_portrait = scope:match_choice_3

		scope:match_choice_3 = {
			save_scope_as = selected_match_choice
		}

		selection_option_bonus_effects = { MATCH_CHOICE_TYPE = scope:match_choice_3_type }

		ai_chance = {
			base = 50
		}

	}

	option = { # none of them
		name = aeluran_matchmaking_choice.none
		add_piety = -150
	}

	after = {
		# cleanup generated characters

		trigger_event = aeluran_matchmaking.0026
	}
}

aeluran_matchmaking.0026 = {
	type = activity_event
	title = aeluran_matchmaking.0026.title
	desc = aeluran_matchmaking.0026.desc

	window = tour_arrival_event
	theme = aeluran_standard
	content_source = elf_destiny

	left_portrait = {
		trigger = { exists = scope:host }
		character = scope:host
		animation = personality_content
	}
	center_portrait = {
		character = scope:spouse_female
		camera = camera_event_left_wedding
		animation = wedding_bride_left
	}
	right_portrait = {
		character = scope:spouse_male
		camera = camera_event_right_wedding
		animation = wedding_groom_right
	}


	immediate = {
		if = {
			limit = {
				scope:activity.special_guest:match_recipient = {
					is_female = yes
				}
			}
			scope:activity.special_guest:match_recipient = {
				save_scope_as = spouse_female
			}
			scope:selected_match_choice = {
				save_scope_as = spouse_male
			}
		}
		else = {
			scope:activity.special_guest:match_recipient = {
				save_scope_as = spouse_male
			}
			scope:selected_match_choice = {
				save_scope_as = spouse_female
			}
		}

	}

	option = {
		name = aeluran_matchmaking.0026.ok
		marry_match_option = yes
	}
	option = {
		name = aeluran_matchmaking.0026.grand_wedding
	}
}