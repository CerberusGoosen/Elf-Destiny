# request_matchmaking_interaction = {
# 	category = interaction_category_friendly
# 	interface_priority = 60
# 	icon = send_to_varangian_guard_interaction

# 	desc = request_matchmaking_desc
# 	use_diplomatic_range = no
# 	common_interaction = yes
	
# 	is_shown = {
# 		NOT = { scope:recipient = scope:actor }

# 		scope:actor = {
# 			is_ai = no
# 			faith = {
# 				has_doctrine = tenet_aeluran_sisters
# 			}
# 		}

# 		scope:recipient = {
# 			is_councillor_of = scope:host
# 			OR = {
# 				has_trait = aeluran_sister
# 				has_trait = aeluran_matron
# 				has_trait = aeluran_high_matriarch
# 			}
# 		}
# 	}
	
# 	cooldown = { years = 2 }

# 	is_valid_showing_failures_only = {
# 		scope:actor = {
# 			is_at_war = no
# 			is_married = no
# 		}
# 	}
	
# 	on_accept = {
# 		hidden_effect = {
# 			scope:actor = {
# 				trigger_event = aeluran_matchmaking.001
# 			}
# 		}
# 	}
	
# 	cost = {
# 		prestige = {
# 			value = 10
# 		}
# 	}
	
# 	auto_accept = yes

# 	# ai_potential = {
# 	# 	is_ai = no
# 	# }
# 	ai_will_do = {
# 		base = 0
# 	}
# }

sister_convert_me_to_aeluran_interaction = {
	category = interaction_category_religion
	interface_priority = 60
	icon = icon_aeluran_sister

	desc = convert_me_to_aeluran_desc
	use_diplomatic_range = no
	common_interaction = yes
	
	is_shown = {
		NOT = { scope:recipient = scope:actor }

		scope:actor = {
			is_ai = no
			NOT = {
				faith = faith:aeluran_weavers
			}
		}

		scope:recipient = {
			has_trait = aeluran_sister
		}
	}
	
	cooldown = { years = 2 }

	is_valid_showing_failures_only = {

	}
	
	on_accept = {
		hidden_effect = {
			scope:actor = {
				trigger_event = aeluran_character_interaction.001
			}
		}
	}
	
	cost = {
		prestige = {
			value = 10
		}
	}
	
	auto_accept = yes

	# ai_potential = {
	# 	is_ai = no
	# }
	ai_will_do = {
		base = 0
	}
}
matron_convert_me_to_aeluran_interaction = {
	category = interaction_category_religion
	interface_priority = 60
	icon = icon_aeluran_matron

	desc = convert_me_to_aeluran_desc
	use_diplomatic_range = no
	common_interaction = yes
	
	is_shown = {
		NOT = { scope:recipient = scope:actor }

		scope:actor = {
			is_ai = no
			NOT = {
				faith = faith:aeluran_weavers
			}
		}

		scope:recipient = {
			has_trait = aeluran_matron
		}
	}
	
	cooldown = { years = 2 }

	is_valid_showing_failures_only = {

	}
	
	on_accept = {
		hidden_effect = {
			scope:actor = {
				trigger_event = aeluran_character_interaction.001
			}
		}
	}
	
	cost = {
		prestige = {
			value = 10
		}
	}
	
	auto_accept = yes

	# ai_potential = {
	# 	is_ai = no
	# }
	ai_will_do = {
		base = 0
	}
}
matriarch_convert_me_to_aeluran_interaction = {
	category = interaction_category_religion
	interface_priority = 60
	icon = icon_aeluran_high_matriarch

	desc = convert_me_to_aeluran_desc
	use_diplomatic_range = no
	common_interaction = yes
	
	is_shown = {
		NOT = { scope:recipient = scope:actor }

		scope:actor = {
			is_ai = no
			NOT = {
				faith = faith:aeluran_weavers
			}
		}

		scope:recipient = {
			has_trait = aeluran_high_matriarch
		}
	}
	
	cooldown = { years = 2 }

	is_valid_showing_failures_only = {

	}
	
	on_accept = {
		hidden_effect = {
			scope:actor = {
				trigger_event = aeluran_character_interaction.001
			}
		}
	}
	
	cost = {
		prestige = {
			value = 10
		}
	}
	
	auto_accept = yes

	# ai_potential = {
	# 	is_ai = no
	# }
	ai_will_do = {
		base = 0
	}
}

sister_change_gender_of_unborn = {
	category = interaction_category_religion
	interface_priority = 60
	icon = icon_aeluran_sister

	desc = change_gender_of_unborn_desc
	use_diplomatic_range = no
	common_interaction = yes
	
	is_shown = {
		scope:actor = {
			is_ai = no
		}

		scope:recipient = {
			has_trait = aeluran_sister
			is_pregnant = yes
			# TODO: baby is child of actor check
		}
	}
	
	cooldown = { years = 1 }

	is_valid_showing_failures_only = {

	}
	
	on_accept = {
		hidden_effect = {
			scope:actor = {
				trigger_event = aeluran_character_interaction.002
			}
		}
	}
	
	cost = {
		prestige = {
			value = 10
		}
	}
	
	auto_accept = yes

	# ai_potential = {
	# 	is_ai = no
	# }
	ai_will_do = {
		base = 0
	}
}
matron_change_gender_of_unborn = {
	category = interaction_category_religion
	interface_priority = 60
	icon = icon_aeluran_matron

	desc = change_gender_of_unborn_desc
	use_diplomatic_range = no
	common_interaction = yes
	
	is_shown = {
		scope:actor = {
			is_ai = no
		}

		scope:recipient = {
			has_trait = aeluran_matron
			is_pregnant = yes
			# TODO: baby is child of actor check
		}
	}
	
	cooldown = { years = 1 }

	is_valid_showing_failures_only = {

	}
	
	on_accept = {
		hidden_effect = {
			scope:actor = {
				trigger_event = aeluran_character_interaction.002 
			}
		}
	}
	
	cost = {
		prestige = {
			value = 10
		}
	}
	
	auto_accept = yes

	# ai_potential = {
	# 	is_ai = no
	# }
	ai_will_do = {
		base = 0
	}
}
matriarch_change_gender_of_unborn = {
	category = interaction_category_religion
	interface_priority = 60
	icon = icon_aeluran_high_matriarch

	desc = change_gender_of_unborn_desc
	use_diplomatic_range = no
	common_interaction = yes
	
	is_shown = {
		scope:actor = {
			is_ai = no
		}

		scope:recipient = {
			has_trait = aeluran_high_matriarch
			is_pregnant = yes
			# TODO: baby is child of actor check
		}
	}
	
	cooldown = { years = 1 }

	is_valid_showing_failures_only = {

	}
	
	on_accept = {
		hidden_effect = {
			scope:actor = {
				trigger_event = aeluran_character_interaction.002 
			}
		}
	}
	
	cost = {
		prestige = {
			value = 10
		}
	}
	
	auto_accept = yes

	# ai_potential = {
	# 	is_ai = no
	# }
	ai_will_do = {
		base = 0
	}
}


# Liege (actor) selects a vizier to help them run the realm.
appoint_aeluran_adviser_interaction = {
	category = interaction_category_diarch
	icon = icon_declare_me_regent

	desc = appoint_vizier_interaction_desc
	interface_priority = 20

	is_shown = {
		scope:actor = {
			is_ai = no
		}
	}

	is_valid_showing_failures_only = {

	}

	# cooldown = {}

	populate_recipient_list = { sort_aeluran_candidates_to_list_effect = yes }

	cost = {

	}

	auto_accept = yes

	pre_auto_accept = {
		# If we're an AI, set the secondary_recipient up for us.
		scope:actor = {
			if = {
				limit = { is_ai = yes }
				# First, we need to calc who _is_ most qualified; we don't have access to the character list any more, so reassemble it.
				sort_aeluran_candidates_to_list_effect = yes
				# Now, parse through the the list to find the best character.
				ordered_in_list = {
					list = characters
					order_by = diarchy_vizier_succession_score_value
					save_scope_as = ai_recipient
				}
			}
		}
	}

	on_accept = {
		scope:actor = {
			# We enter into a vizierate with scope:secondary_recipient.
			custom_tooltip = {
				text = appoint_vizier_interaction.tt.enter_vizierate_with_secondary_recipient
				start_diarchy = aleuran_regency
				# The player uses scope:secondary_recipient.
				if = {
					limit = {
						# We use a NOT here  rather than is_ai = no because the AI was occasionally managing to bork its selection process, and the title does _not_ like setting an empty diarch, so we fallback AI who can't behave to a sub-optimal choice.
						NOT = { exists = scope:ai_recipient }
					}
					set_diarch = scope:secondary_recipient
				}
				# Whereas the AI grabs their pre-selected candidate.
				else = {
					set_diarch = scope:ai_recipient
				}
			}
			# Apply opinion.
			## AI.
			if = {
				limit = { exists = scope:ai_recipient }
				scope:ai_recipient = {
					add_opinion = {
						target = scope:actor
						modifier = compliment_opinion
						opinion = 30
					}
					stress_impact = {
						ambitious = minor_stress_impact_loss
						arrogant = minor_stress_impact_loss
						lazy = major_stress_impact_gain
					}
				}
			}
			## Player.
			else = {
				scope:secondary_recipient = {
					add_opinion = {
						target = scope:actor
						modifier = compliment_opinion
						opinion = 30
					}
					stress_impact = {
						ambitious = minor_stress_impact_loss
						arrogant = minor_stress_impact_loss
						lazy = major_stress_impact_gain
					}
				}
			}
			# And get X tax jurisdictions.
			custom_tooltip = appoint_vizier_interaction.tt.secondary_recipient_grants_tax_jurisdictions
			# If scope:secondary_recipient isn't the most qualified candidate, we'll take a scaling negative stewardship modifier.
			## The AI will always pick the highest scoring character, so we only do this for players - lock it off so we're not doing lots of unnecessary calculating.
			if = {
				limit = { is_ai = no }
				# First, we need to calc who _is_ most qualified; we don't have access to the character list any more, so reassemble it.
				sort_aeluran_candidates_to_list_effect = yes
				# Now, parse through the the list to find the best character.
				ordered_in_list = {
					list = characters
					order_by = diarchy_vizier_succession_score_value
					save_scope_as = best_candidate
				}
				# Is our chap _the_ chap?
				if = {
					limit = {
						NOT = { scope:secondary_recipient = scope:best_candidate }
					}
					# Ok, now display some warnings.
					custom_tooltip = appoint_vizier_interaction.tt.secondary_recipient_is_not_best_candidate
					add_character_modifier = {
						modifier = civil_service_upset_modifier
						years = 10
					}
				}
			}
			# Are they of our house?
			if = {
				limit = {
					exists = scope:secondary_recipient.house
					house ?= scope:secondary_recipient.house
				}
				custom_tooltip = appoint_vizier_interaction.tt.same_house_penalty
			}
			# If we have a designated diarch (and it's not this guy), then they're annoyed.
			designated_diarch ?= {
				if = {
					limit = {
						NOT = { this = scope:secondary_recipient }
					}
					add_opinion = {
						target = scope:actor
						modifier = appointed_vizier_over_designated_regent_opinion
						opinion = -40
					}
				}
			}
			# Set a reminder that we appointed this vizier — the AI'll use this to help with determining whether they should remove them or not.
			set_variable = {
				name = my_vizier
				value = scope:recipient
			}
			# Finally, let's do some stress.
			stress_impact = {
				trusting = massive_stress_impact_loss
				lazy = major_stress_impact_loss
				paranoid = minor_stress_impact_gain
				diligent = minor_stress_impact_gain
			}
		}
		# Notify about council problemos.
		scope:secondary_recipient = {
			if = {
				limit = { is_councillor = yes }
				custom_tooltip = appoint_vizier_interaction.tt.warning.vizier_replace_councillor
			}
		}
		
		# Object explorer logging.
		scope:actor = {
			diarch_interaction_set_or_update_global_variable_effect = { VARIABLE = di_track_appviz_accept }
			diarch_interaction_add_to_global_list_effect = { VARIABLE_LIST = di_track_appviz_accept_actor_list }
		}
		scope:recipient = {
			diarch_interaction_add_to_global_list_effect = { VARIABLE_LIST = di_track_appviz_accept_recipient_list }
		}
	}

	# AI
	ai_targets = { ai_recipients = self }
	ai_frequency = 240
	
	ai_potential = {
		government_has_flag = may_appoint_viziers
	}
	
	ai_will_do = {
		base = 0

		# Realm.
		## Weight up for kings.
		modifier = {
			add = 50
			highest_held_title_tier = tier_kingdom
		}
		## Weight up for emperors.
		modifier = {
			add = 75
			highest_held_title_tier >= tier_empire
		}
		## Add realm size directly.
		modifier = {
			add = sub_realm_size
			is_landed = yes
		}

		# Traits.
		## +++ Lazy.
		modifier = {
			add = 25
			has_trait = lazy
		}
		## +++ Greedy.
		modifier = {
			add = 25
			has_trait = greedy
		}
		## ++ Humble.
		modifier = {
			add = 15
			has_trait = humble
		}
		## ++ Content.
		modifier = {
			add = 15
			has_trait = content
		}
		## ++ Impatient.
		modifier = {
			add = 15
			has_trait = impatient
		}
		## + Content.
		modifier = {
			add = 5
			has_trait = content
		}
		## + Shy.
		modifier = {
			add = 5
			has_trait = shy
		}
		## - Gregarious.
		modifier = {
			add = -5
			has_trait = gregarious
		}
		## -- Patient.
		modifier = {
			add = -15
			has_trait = patient
		}
		## -- Diligent.
		modifier = {
			add = -15
			has_trait = diligent
		}
		## --- Arrogant.
		modifier = {
			add = -25
			has_trait = arrogant
		}
		## --- Ambitious.
		modifier = {
			add = -25
			has_trait = ambitious
		}
	}
	
}
