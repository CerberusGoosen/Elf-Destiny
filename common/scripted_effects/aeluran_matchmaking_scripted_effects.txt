
generate_matchmaking_candidates_effect = {
	generate_new_matchmaking_candidate = { MATCHID = 1 }
	if = {
		limit = {
			exists = scope:match_choice_1_type
			NOR = {
				scope:match_choice_1_type = flag:twins
				scope:match_choice_1_type = flag:triplets
			}
		}
		generate_new_matchmaking_candidate = { MATCHID = 2 }
	}

	if = {
		limit = {
			exists = scope:match_choice_2_type
			NOR = {
				scope:match_choice_1_type = flag:triplets
				scope:match_choice_2_type = flag:twins
			}
		}
		generate_new_matchmaking_candidate = { MATCHID = 3 }
	}
}

generate_new_matchmaking_candidate = {
	random_list = {
		0 = { # Default Standard Elf
			modifier = {
				add = 100
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:standard_elf
			}

			find_standard_elf_match_choice = { MATCHID = $MATCHID$ }
		}
		0 = { # Aeluran Sister
			modifier = {
				add = 100
				is_female = no
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:aeluran_sister
			}

			find_aeluran_sister_match_choice = { MATCHID = $MATCHID$ }
		}
		0 = { # Aeluran Matron
			modifier = {
				add = 100
				is_female = no
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:aeluran_matron
			}

			find_aeluran_matron_match_choice = { MATCHID = $MATCHID$ }
		}
		0 = { # Aeluran Matriarch
			modifier = {
				add = 100
				is_female = no
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:aeluran_matriarch
			}

			find_aeluran_matriarch_match_choice = { MATCHID = $MATCHID$ }
		}
		0 = { # Aeluran Genetic Project
			modifier = {
				add = 100
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:genetic_project
			}

			find_aeluran_genetic_project_match_choice = { MATCHID = $MATCHID$ }
		}
		0 = { # Family
			modifier = {
				add = 100
				root = { 
					OR = {
						culture = {
							has_cultural_parameter = allows_unrestricted_marriage
						}
						faith = {
							has_doctrine = tenet_divine_marriage
						}
					}
				}
				family_option_available = yes
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:family
			}

			find_family_member_match_choice = { MATCHID = $MATCHID$ }
		}
		0 = { # Bloodline Trait
			modifier = {
				add = 100
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:bloodline_trait
			}

			find_bloodline_holder_match_choice = { MATCHID = $MATCHID$ }
		}
		0 = { # Alliance
			modifier = {
				add = 100
				alliance_option_available = yes
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:alliance
			}

			find_alliance_match_choice = { MATCHID = $MATCHID$ }
		}
		0 = { # Warrior
			modifier = {
				add = 100
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:warrior
			}

			find_tribal_warrior_match_choice = { MATCHID = $MATCHID$ }
		}
		0 = { # Wisewomen/man, skilled healer
			modifier = {
				add = 100
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:wisemen
			}

			find_wiseman_match_choice = { MATCHID = $MATCHID$ }
		}
		0 = { # Bastard Claimant
			modifier = {
				add = 100
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:bastard_claimant
			}

			find_bastard_claimant_match_choice = { MATCHID = $MATCHID$ }
		}
		0 = { # Inferior Dowry Elf
			modifier = {
				add = 100
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:inferior_dowry
			}

			find_inferior_dowry_elf_match_choice = { MATCHID = $MATCHID$ }
		}
		0 = { # Foreign Elf
			modifier = {
				add = 100
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:foreign_elf
			}

			find_foreign_elf_match_choice = { MATCHID = $MATCHID$ }
		}
		0 = { # Twins
			modifier = {
				add = 100
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:twins
			}

			find_twins_match_choice = { MATCHID = $MATCHID$ }
		}
		0 = { # Triplets
			modifier = {
				add = 100
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:triplets
			}

			find_triplets_match_choice = { MATCHID = $MATCHID$ }
		}
	}
}

# ===== STANDARD ELF =====

find_standard_elf_match_choice = {
	if = {
		limit = {
			preexisting_standard_elf_exists = yes
		}
		assign_preexisting_standard_elf = { MATCHID = $MATCHID$ }
	}
	else = {
		generate_new_standard_elf = { MATCHID = $MATCHID$ }
	}
}

assign_preexisting_standard_elf = {
	random_living_character = {
		limit = {
			is_acceptable_standard_elf_match_choice = yes
		}
		save_scope_as = match_choice_$MATCHID$
	}
}

generate_new_standard_elf = {
	create_character = {
		template = standard_elf_match
		gender_female_chance = matchmaking_female_gender_chance
		dynasty = none
		location = root.location
		faith = root.faith
		culture = root.culture
		save_scope_as = match_choice_$MATCHID$
	}
}

# ===== AELURAN SISTER =====

find_aeluran_sister_match_choice = {
	if = {
		limit = {
			preexisting_aeluran_sister_exists = yes
		}
		assign_preexisting_aeluran_sister = { MATCHID = $MATCHID$ }
	}
	else = {
		generate_new_aeluran_sister = { MATCHID = $MATCHID$ }
	}
}

assign_preexisting_aeluran_sister = {
	random_living_character = {
		limit = {
			is_acceptable_aeluran_sister_match_choice = yes
		}
		save_scope_as = match_choice_$MATCHID$
	}
}

generate_new_aeluran_sister = {
	create_character = {
		template = aeluran_sister_match
		dynasty = none
		location = root.location
		culture = root.culture
		save_scope_as = match_choice_$MATCHID$
	}
}

# ===== AELURAN MATRON =====

find_aeluran_matron_match_choice = {
	if = {
		limit = {
			preexisting_aeluran_matron_exists = yes
		}
		assign_preexisting_aeluran_matron = { MATCHID = $MATCHID$ }
	}
	else = {
		generate_new_aeluran_matron = { MATCHID = $MATCHID$ }
	}
}

assign_preexisting_aeluran_matron = {
	random_living_character = {
		limit = {
			is_acceptable_aeluran_matron_match_choice = yes
		}
		save_scope_as = match_choice_$MATCHID$
	}
}

generate_new_aeluran_matron = {
	create_character = {
		template = aeluran_matron_match
		dynasty = none
		location = root.location
		culture = root.culture
		save_scope_as = match_choice_$MATCHID$
	}
}

# ===== AELURAN MATRIARCH =====

find_aeluran_matriarch_match_choice = {
	if = {
		limit = {
			preexisting_aeluran_matriarch_exists = yes
		}
		assign_preexisting_aeluran_matriarch = { MATCHID = $MATCHID$ }
	}
}

assign_preexisting_aeluran_matriarch = {
	random_living_character = {
		limit = {
			is_acceptable_aeluran_matriarch_match_choice = yes
		}
		save_scope_as = match_choice_$MATCHID$
	}
}

# ===== AELURAN GENETIC PROJECT =====

find_aeluran_genetic_project_match_choice = {
	generate_new_aeluran_genetic_project = { MATCHID = $MATCHID$ }
}

generate_new_aeluran_genetic_project = {
	if = {
		limit = {
			scope:match_recipient = {
				is_female = no
			}
		}
		create_character = {
			template = aeluran_genetic_project_match
			gender = male
			dynasty = none
			location = root.location
			faith = root.faith
			culture = root.culture
			save_scope_as = match_choice_$MATCHID$
		}
	}
	else = {
		create_character = {
			template = aeluran_genetic_project_match
			gender = female
			dynasty = none
			location = root.location
			faith = root.faith
			culture = root.culture
			save_scope_as = match_choice_$MATCHID$
		}
	}
}

# ===== FAMILY MEMBER =====

find_family_member_match_choice = {
	if = {
		limit = {
			preexisting_family_member_exists = yes
		}
		assign_preexisting_family_member = { MATCHID = $MATCHID$ }
	}
}

assign_preexisting_family_member = {
	random_living_character = {
		limit = {
			is_acceptable_family_member_match_choice = yes
		}
		save_scope_as = match_choice_$MATCHID$
	}
}

# ===== BLOODLINE HOLDER =====

find_bloodline_holder_match_choice = {
	if = {
		limit = {
			preexisting_bloodline_holder_exists = yes
		}
		assign_preexisting_bloodline_holder = { MATCHID = $MATCHID$ }
	}
	else = {
		generate_new_bloodline_holder = { MATCHID = $MATCHID$ }
	}
}

assign_preexisting_bloodline_holder = {
	random_living_character = {
		limit = {
			is_acceptable_bloodline_holder_match_choice = yes
		}
		save_scope_as = match_choice_$MATCHID$
	}
}

generate_new_bloodline_holder = {
	random_list = {
		10 = {
			save_scope_value_as = {
				name = bloodline_holder_type
				value = flag:valerith
			} 
		}
		10 = {
			save_scope_value_as = {
				name = bloodline_holder_type
				value = flag:serelion
			} 
		}
		10 = {
			save_scope_value_as = {
				name = bloodline_holder_type
				value = flag:gwynthorn
			} 
		}
		10 = {
			save_scope_value_as = {
				name = bloodline_holder_type
				value = flag:thundarael
			} 
		}
		10 = {
			save_scope_value_as = {
				name = bloodline_holder_type
				value = flag:daelurin
			} 
		}
	}

	create_character = {
		template = bloodline_holder_match
		gender_female_chance = matchmaking_female_gender_chance
		dynasty = none
		location = root.location
		faith = root.faith
		culture = root.culture
		save_scope_as = match_choice_$MATCHID$
	}
}

# ===== ALLIANCE =====

find_alliance_match_choice = {
	if = {
		limit = {
			preexisting_alliance_exists = yes
		}
		assign_preexisting_alliance = { MATCHID = $MATCHID$ }
	}
}

assign_preexisting_alliance = {
	random_living_character = {
		limit = {
			is_acceptable_alliance_match_choice = yes
		}
		if = {
			limit = {
				this = {
					is_suitable_elf_spouse = yes
				}
			}
			this = {
				save_scope_as = match_choice_$MATCHID$
			}
		}
		else = {
			this = {
				random_child = {
					limit = {
						is_suitable_elf_spouse = yes
					}
					save_scope_as = match_choice_$MATCHID$
				}
			}
		}
	}
}

# ===== TRIBAL WARRIOR =====

find_tribal_warrior_match_choice = {
	generate_new_tribal_warrior = { MATCHID = $MATCHID$ }
}

generate_new_tribal_warrior = {
	create_character = {
		template = tribal_warrior_match
		gender_female_chance = matchmaking_female_gender_chance
		dynasty = none
		location = root.location
		faith = root.faith
		culture = root.culture
		save_scope_as = match_choice_$MATCHID$
	}
}

# ===== WISEMAN =====

find_wiseman_match_choice = {
	generate_new_wiseman = { MATCHID = $MATCHID$ }
}

generate_new_wiseman = {
	create_character = {
		template = wiseman_match
		gender_female_chance = matchmaking_female_gender_chance
		dynasty = none
		location = root.location
		faith = root.faith
		culture = root.culture
		save_scope_as = match_choice_$MATCHID$
	}
}

# ===== BASTARD CLAIMANT =====

find_bastard_claimant_match_choice = {
	find_lord_parent = yes
	generate_new_bastard_claimant = { MATCHID = $MATCHID$ }
}

find_lord_parent = {
	random_living_character = {
		limit = {
			is_acceptable_bastard_claimant_parent = yes
		}
		save_scope_as = bastard_claimant_parent
	}
}

generate_new_bastard_claimant = {
	create_character = {
		template = bastard_claimant_match
		gender_female_chance = matchmaking_female_gender_chance
		dynasty_house = scope:bastard_claimant_parent.house
		location = root.location
		faith = scope:bastard_claimant_parent.faith
		culture = scope:bastard_claimant_parent.culture
		save_scope_as = match_choice_$MATCHID$

		after_creation = {
			if = {
				limit = {
					scope:bastard_claimant_parent = {
						is_female = yes
					}
				}
				set_mother = scope:bastard_claimant_parent
			}
			else = {
				set_real_father = scope:bastard_claimant_parent
			}
	
			add_pressed_claim = scope:bastard_claimant_parent.primary_title

			set_relation_rival = {
				target = scope:bastard_claimant_parent
				reason = bastard_claimant
			}
		}
	}

	# VVVV Add to option VVVV
	# set_relation_rival = {
	# 	target = scope:bastard_claimant_parent
	# 	reason = sheltered_bastard_claimant
	# }
}

# ===== INFERIOR DOWRY ELF =====

find_inferior_dowry_elf_match_choice = {
	if = {
		limit = {
			preexisting_inferior_dowry_elf_exists = yes
		}
		assign_preexisting_inferior_dowry_elf = { MATCHID = $MATCHID$ }
	}
	else = {
		generate_new_inferior_dowry_elf = { MATCHID = $MATCHID$ }
	}
}

assign_preexisting_inferior_dowry_elf = {
	random_living_character = {
		limit = {
			is_acceptable_inferior_dowry_elf_match_choice = yes
		}
		save_scope_as = match_choice_$MATCHID$
	}
}

generate_new_inferior_dowry_elf = {
	create_character = {
		template = inferior_dowry_elf_match
		gender_female_chance = matchmaking_female_gender_chance
		dynasty = none
		location = root.location
		faith = root.faith
		culture = root.culture
		save_scope_as = match_choice_$MATCHID$
	}
}

# ===== FOREIGN ELF =====

find_foreign_elf_match_choice = {
	if = {
		limit = {
			preexisting_foreign_elf_exists = yes
		}
		assign_preexisting_foreign_elf = { MATCHID = $MATCHID$ }
	}
	else = {
		find_foreigner_to_copy_culture = yes
		generate_new_foreign_elf = { MATCHID = $MATCHID$ }
	}
}

assign_preexisting_foreign_elf = {
	random_living_character = {
		limit = {
			is_acceptable_foreign_elf_match_choice = yes
		}

		if = {
			limit = {
				NOT = {
					has_trait = lifestyle_traveler
				}
			}
			add_trait = lifestyle_traveler
			add_trait_xp = {
				trait = lifestyle_traveler
				track = travel
				value = {
					integer_range = {
						min = 70
						max = 100
					}
				}
			}
			add_trait_xp = {
				trait = lifestyle_traveler
				track = danger
				value = {
					integer_range = {
						min = 70
						max = 100
					}
				}
			}
		}
		if = {
			limit = {
				NOT = {
					has_trait = adventurer
				}
			}
			add_trait = adventurer
			add_trait_xp = {
				trait = adventurer
				value = {
					integer_range = {
						min = 70
						max = 100
					}
				}
			}
		}

		save_scope_as = match_choice_$MATCHID$
	}
}

find_foreigner_to_copy_culture = {
	random_living_character = {
		limit = {
			NOT = {
				is_within_diplo_range = { CHARACTER = root }
			}
			NOT = {
				culture = root.culture
			}
		}

		save_scope_as = foreign_person
	}
}

generate_new_foreign_elf = {
	create_character = {
		template = foreign_elf_match
		gender_female_chance = matchmaking_female_gender_chance
		dynasty = none
		location = root.location
		faith = root.faith
		culture = scope:foreign_person.culture
		save_scope_as = match_choice_$MATCHID$
	}
}

# ===== TWINS =====

find_twins_match_choice = {
	generate_multi_birth_mother = yes
	generate_new_twins = { MATCHID = $MATCHID$ }
}

generate_multi_birth_mother = {
	create_character = {
		template = match_choice_multi_mother
		gender_female_chance = matchmaking_female_gender_chance
		dynasty = none
		location = root.location
		faith = root.faith
		culture = root.culture
		save_scope_as = match_choice_multi_mother
	}
}

generate_new_twins = {
	create_character = {
		template = twins_match
		gender_female_chance = matchmaking_female_gender_chance
		mother = scope:match_choice_multi_mother
		dynasty = none
		location = root.location
		faith = root.faith
		culture = root.culture
		save_scope_as = match_choice_$MATCHID$_1
	}
	create_character = {
		template = twins_match
		gender_female_chance = matchmaking_female_gender_chance
		mother = scope:match_choice_multi_mother
		dynasty = none
		location = root.location
		faith = root.faith
		culture = root.culture
		save_scope_as = match_choice_$MATCHID$_2
	}
}

# ===== TRIPLETS =====

find_triplets_match_choice = {
	generate_multi_birth_mother = yes
	generate_new_triplets = { MATCHID = $MATCHID$ }
}

generate_multi_birth_mother = {
	create_character = {
		template = match_choice_multi_mother
		gender_female_chance = matchmaking_female_gender_chance
		dynasty = none
		location = root.location
		faith = root.faith
		culture = root.culture
		save_scope_as = match_choice_multi_mother
	}
}

generate_new_triplets = {
	create_character = {
		template = triplets_match
		gender_female_chance = matchmaking_female_gender_chance
		mother = scope:match_choice_multi_mother
		dynasty = none
		location = root.location
		faith = root.faith
		culture = root.culture
		save_scope_as = match_choice_$MATCHID$_1
	}
	create_character = {
		template = triplets_match
		gender_female_chance = matchmaking_female_gender_chance
		mother = scope:match_choice_multi_mother
		dynasty = none
		location = root.location
		faith = root.faith
		culture = root.culture
		save_scope_as = match_choice_$MATCHID$_2
	}
	create_character = {
		template = triplets_match
		gender_female_chance = matchmaking_female_gender_chance
		mother = scope:match_choice_multi_mother
		dynasty = none
		location = root.location
		faith = root.faith
		culture = root.culture
		save_scope_as = match_choice_$MATCHID$_3
	}
}


# =======> random_traits = no, <=========
# learning = { 14 22 }

# is_suitable_female_breeder_has_bloodline = yes

## Aelurans ##
find_aeluran_match_option_effect = {
	debug_log = "finding aeluran option"
	
	if = {
		limit = {
			scope:aeluran_respect_level >= 4
		}
		if = {
			limit = {
				exists = scope:match_option_alliance
			}
			random_living_character = {
				limit = {
					is_female = yes
					has_trait = aeluran_matron
					NOT = { this = scope:match_option_alliance }
				}
				debug_log = "Assigning match_option_aeluran 6"
				
				save_scope_as = match_option_aeluran
			}
		}
		else_if = {
			limit = {
				exists = scope:match_option_family
			}
			random_living_character = {
				limit = {
					is_female = yes
					has_trait = aeluran_matron
					NOT = { this = scope:match_option_family }
				}
				debug_log = "Assigning match_option_aeluran 5"

				save_scope_as = match_option_aeluran
			}
		}
		else = {
			random_living_character = {
				limit = {
					is_female = yes
					has_trait = aeluran_matron
				}
				debug_log = "Assigning match_option_aeluran 4"

				save_scope_as = match_option_aeluran
			}
		}
	}
	else = {
		if = {
			limit = {
				exists = scope:match_option_alliance
			}
			random_living_character = {
				limit = {
					is_female = yes
					has_trait = aeluran_sister
					NOT = { this = scope:match_option_alliance }
				}
				debug_log = "Assigning match_option_aeluran 1"
				save_scope_as = match_option_aeluran
			}
		}
		else_if = {
			limit = {
				exists = scope:match_option_family
			}
			random_living_character = {
				limit = {
					is_female = yes
					has_trait = aeluran_sister
					NOT = { this = scope:match_option_family }
				}
				debug_log = "Assigning match_option_aeluran 2"
				save_scope_as = match_option_aeluran
			}
		}
		else = {
			random_living_character = {
				limit = {
					is_female = yes
					has_trait = aeluran_sister
				}
				debug_log = "Assigning match_option_aeluran 3"

				save_scope_as = match_option_aeluran
			}
		}
	}
	if = { # Still no luck? lets just create one
		limit = {
			NOT = { exists = scope:match_option_aeluran }
		}
		save_scope_value_as = {
			name = aeluran_generated
			value = 1
		}
		create_character = {
			template = aeluran_sister_match
			dynasty = none
			location = root.location
			faith = root.faith
			culture = root.culture
			save_scope_as = match_option_aeluran
		}
	}
}

## Alliances ##
find_strong_aeluran_alliance_match_option_effect = {
	debug_log = "finding alliance option"
	
	if = { # Your an Emperor
		limit = {
			highest_held_title_tier = tier_empire
		}
		if = {
			limit = {
				scope:match_recipient = {
					is_female = no
				}
			}
			random_living_character = {
				limit = {
					is_elf_empress = yes
					OR = {
						is_suitable_female_elf_spouse = yes
						any_child = {
							is_suitable_female_elf_spouse = yes
						}
					}
				}
				if = { # can we marry the empress?
					limit = {
						alliance_compatible_female_empress = yes
					}
					save_scope_as = match_option_alliance
				}
				else_if = { # if not can we marry one of their children?
					limit = {
						any_child = {
							is_suitable_female_elf_spouse = yes
						}
					}
					every_child = {
						if = {
							limit = {
								is_suitable_female_elf_spouse = yes
							}
							save_scope_as = match_option_alliance
						}
					}
				}
			}
		} 
		else = {
			random_living_character = {
				limit = {
					is_elf_emperor = yes
					OR = {
						is_suitable_male_elf_spouse = yes
						any_child = {
							is_suitable_male_elf_spouse = yes
						}
					}
				}
				if = { # can we marry the emperor?
					limit = {
						alliance_compatible_male_emperor = yes
					}
					save_scope_as = match_option_alliance
				}
				else_if = { # if not can we marry one of their children?
					limit = {
						any_child = {
							is_suitable_male_elf_spouse = yes
						}
					}
					every_child = {
						if = {
							limit = {
								is_suitable_male_elf_spouse = yes
							}
							save_scope_as = match_option_alliance
						}
					}
				}
			}
		}
	}
	else_if = { # Your a King
		limit = {
			highest_held_title_tier = tier_kingdom
		}
		if = {
			limit = {
				scope:match_recipient = {
					is_female = no
				}
			}
			random_living_character = {
				limit = {
					OR = {
						is_elf_empress = yes
						is_elf_queen = yes
					}
					OR = {
						is_suitable_female_elf_spouse = yes
						any_child = {
							is_suitable_female_elf_spouse = yes
						}
					}
				}
				if = { # can we marry the ruler?
					limit = {
						alliance_compatible_female_queen_or_higher = yes
					}
					save_scope_as = match_option_alliance
				}
				else_if = { # if not can we marry one of their children?
					limit = {
						any_child = {
							is_suitable_female_elf_spouse = yes
						}
					}
					every_child = {
						if = {
							limit = {
								is_suitable_female_elf_spouse = yes
							}
							save_scope_as = match_option_alliance
						}
					}
				}
			}
		} 
		else = {
			random_living_character = {
				limit = {
					OR = {
						is_elf_emperor = yes
						is_elf_king = yes
					}
					OR = {
						is_suitable_male_elf_spouse = yes
						any_child = {
							is_suitable_male_elf_spouse = yes
						}
					}
				}
				if = { # can we marry the ruler?
					limit = {
						alliance_compatible_male_king_or_higher = yes
					}
					save_scope_as = match_option_alliance
				}
				else_if = { # if not can we marry one of their children?
					limit = {
						any_child = {
							is_suitable_male_elf_spouse = yes
						}
					}
					every_child = {
						if = {
							limit = {
								is_suitable_male_elf_spouse = yes
							}
							save_scope_as = match_option_alliance
						}
					}
				}
			}
		}
	}
	else_if = { # Your a Duke
		limit = {
			highest_held_title_tier = tier_duchy
		}
		if = {
			limit = {
				scope:match_recipient = {
					is_female = no
				}
			}
			debug_log = "Finding Alliance For Duke"
			random_living_character = {
				limit = {
					OR = {
						is_elf_empress = yes
						is_elf_queen = yes
						is_elf_duchess = yes
					}
					OR = {
						is_suitable_female_elf_spouse = yes
						any_child = {
							is_suitable_female_elf_spouse = yes
						}
					}
				}
				if = { # can we marry the ruler?
					limit = {
						alliance_compatible_female_duchess_or_higher = yes
					}
					debug_log = "setting match_option_alliance duke 1"
					save_scope_as = match_option_alliance
					if = {
						limit = {
							exists = scope:match_option_alliance
						}

						debug_log = "match_option_alliance scope is FUCKING ASSIGNED"
					}
					else = {
						debug_log = "what the actual fuck"
					}
				}
				else_if = { # if not can we marry one of their children?
					limit = {
						any_child = {
							is_suitable_female_elf_spouse = yes
						}
					}
					every_child = {
						if = {
							limit = {
								is_suitable_female_elf_spouse = yes
							}
							debug_log = "setting match_option_alliance duke 2"
							save_scope_as = match_option_alliance
						}
					}
				}
			}
		} 
		else ={
			random_living_character = {
				limit = {
					OR = {
						is_elf_emperor = yes
						is_elf_king = yes
						is_elf_duke = yes
					}
					OR = {
						is_suitable_male_elf_spouse = yes
						any_child = {
							is_suitable_male_elf_spouse = yes
						}
					}
				}
				if = { # can we marry the ruler?
					limit = {
						alliance_compatible_male_duke_or_higher = yes
					}
					save_scope_as = match_option_alliance
				}
				else_if = { # if not can we marry one of their children?
					limit = {
						any_child = {
							is_suitable_male_elf_spouse = yes
						}
					}
					every_child = {
						if = {
							limit = {
								is_suitable_male_elf_spouse = yes
							}
							save_scope_as = match_option_alliance
						}
					}
				}
			}
		}
	}
	else_if = { # Your a Count
		limit = {
			highest_held_title_tier = tier_county
		}
		if = {
			limit = {
				scope:match_recipient = {
					is_female = no
				}
			}
			debug_log = "Finding Alliance For Count"
			random_living_character = {
				limit = {
					OR = {
						is_elf_queen = yes
						is_elf_duchess = yes
					}
					OR = {
						is_suitable_female_elf_spouse = yes
						any_child = {
							is_suitable_female_elf_spouse = yes
						}
					}
				}
				if = { # can we marry the ruler?
					limit = {
						alliance_compatible_female_duchess_to_queen = yes
					}
					save_scope_as = match_option_alliance
				}
				else_if = { # if not can we marry one of their children?
					limit = {
						any_child = {
							is_suitable_female_elf_spouse = yes
						}
					}
					every_child = {
						if = {
							limit = {
								is_suitable_female_elf_spouse = yes
							}
							save_scope_as = match_option_alliance
						}
					}
				}
			}
		}
		else = {
			random_living_character = {
				limit = {
					OR = {
						is_elf_king = yes
						is_elf_duke = yes
					}
					OR = {
						is_suitable_male_elf_spouse = yes
						any_child = {
							is_suitable_male_elf_spouse = yes
						}
					}
				}
				if = { # can we marry the ruler?
					limit = {
						alliance_compatible_male_duke_to_king = yes
					}
					debug_log = "setting match_option_alliance count 1"
					save_scope_as = match_option_alliance
				}
				else_if = { # if not can we marry one of their children?
					limit = {
						any_child = {
							is_suitable_male_elf_spouse = yes
						}
					}
					every_child = {
						if = {
							limit = {
								is_suitable_male_elf_spouse = yes
							}
							debug_log = "setting match_option_alliance count 2"
							save_scope_as = match_option_alliance
						}
					}
				}
			}
		}
	}
}

## Breeding Stock ##
# TODO: maybe instead of diplo range we just check for elf traits... 
# im worried about not finding the good elf breeders across the globe, like a desecendant of a great house
find_breeding_stock_match_option_effect = {
	debug_log = "finding breeder option"

	if = {  # First try to find a mate with a bloodline
		limit = {
			scope:aeluran_respect_level >= 3
		}
		if = {
			limit = {
				scope:match_recipient = {
					is_female = no
				}
			}
			random_living_character = {
				limit = {
					is_within_diplo_range = { CHARACTER = root }
					is_suitable_female_breeder_has_bloodline = yes
					is_ai = yes
				}
				save_scope_as = match_option_breeding_stock
			}
		}
		else = {
			random_living_character = {
				limit = {
					is_within_diplo_range = { CHARACTER = root }
					is_suitable_male_breeder_has_bloodline = yes
					is_ai = yes
				}
				save_scope_as = match_option_breeding_stock
			}
		}
	}
	if = { # If we cant find a royal elf, find an elf with good genetics overall
		limit = {
			NOT = { exists = scope:match_option_breeding_stock }
		}
		if = {
			limit = {
				scope:aeluran_respect_level >= 3
			}
			if = {
				limit = {
					scope:match_recipient = {
						is_female = no
					}
				}
				random_living_character = {
					limit = {
						is_within_diplo_range = { CHARACTER = root }
						is_suitable_female_breeder_no_bloodline = yes
						is_ai = yes
					}
					save_scope_as = match_option_breeding_stock
				}
			}
			else = {
				random_living_character = {
					limit = {
						is_within_diplo_range = { CHARACTER = root }
						is_suitable_male_breeder_no_bloodline = yes
						is_ai = yes
					}
					save_scope_as = match_option_breeding_stock
				}
			}
		}
	}
	if = { # Still no luck? lets just create one
		limit = {
			NOT = { exists = scope:match_option_breeding_stock }
		}

		generate_breeding_stock_match_option_effect = {
			SCOPE = match_option_breeding_stock
		}

		save_scope_value_as = {
			name = breeder_generated
			value = 1
		}
	}
}

generate_breeding_stock_match_option_effect = {
	if = {
		limit = {
			scope:aeluran_respect_level >= 5
		}
		if = {
			limit = {
				scope:match_recipient = {
					is_female = no
				}
			}
			create_character = {
				template = outstanding_breeding_stock_female
				dynasty = none
				location = root.location
				faith = root.faith
				culture = root.culture
				save_scope_as = $SCOPE$
			}
		}
		else = {
			create_character = {
				template = outstanding_breeding_stock_male
				dynasty = none
				location = root.location
				faith = root.faith
				culture = root.culture
				save_scope_as = $SCOPE$
			}
		}
	}
	else_if = {
		limit = {
			scope:aeluran_respect_level >= 3
		}
		if = {
			limit = {
				scope:match_recipient = {
					is_female = no
				}
			}
			create_character = {
				template = mediocre_breeding_stock_female
				dynasty = none
				location = root.location
				faith = root.faith
				culture = root.culture
				save_scope_as = $SCOPE$
			}
		}
		else = {
			create_character = {
				template = mediocre_breeding_stock_male
				dynasty = none
				location = root.location
				faith = root.faith
				culture = root.culture
				save_scope_as = $SCOPE$
			}
		}
	}
	else = {
		if = {
			limit = {
				scope:match_recipient = {
					is_female = no
				}
			}
			create_character = {
				template = poor_breeding_stock_female
				dynasty = none
				location = root.location
				faith = root.faith
				culture = root.culture
				save_scope_as = $SCOPE$
			}
		}
		else = {
			create_character = {
				template = poor_breeding_stock_male
				dynasty = none
				location = root.location
				faith = root.faith
				culture = root.culture
				save_scope_as = $SCOPE$
			}
		}
	}
}

## Polygamy ##
find_twins_match_option_effect = {
	debug_log = "finding twins option"
	# TODO VVV
	# copy_inheritable_appearance_from

	if = {
		limit = {
			faith = {
				has_doctrine = doctrine_polygamy
			}
		}
		if = {
			limit = {
				scope:match_recipient = {
					is_female = no
				}
			}
			create_character = {
				template = twins_female
				dynasty = none
				location = root.location
				faith = root.faith
				culture = root.culture
				save_scope_as = match_option_twins_1
			}
			create_character = {
				template = twins_female
				dynasty = none
				location = root.location
				faith = root.faith
				culture = root.culture
				save_scope_as = match_option_twins_2
			}
		}
		else = {
			create_character = {
				template = twins_male
				dynasty = none
				location = root.location
				faith = root.faith
				culture = root.culture
				save_scope_as = match_option_twins_1
			}
			create_character = {
				template = twins_male
				dynasty = none
				location = root.location
				faith = root.faith
				culture = root.culture
				save_scope_as = match_option_twins_2
			}
		}

	}
}

find_triplets_match_option_effect = {
	debug_log = "Finding triplets option"
	
	if = {
		limit = {
			faith = {
				has_doctrine = doctrine_polygamy
			}
		}
		if = {
			limit = {
				scope:match_recipient = {
					is_female = no
				}
			}
			create_character = {
				template = triplets_female
				dynasty = none
				location = root.location
				faith = root.faith
				culture = root.culture
				save_scope_as = match_option_triplets_1
			}
			create_character = {
				template = triplets_female
				dynasty = none
				location = root.location
				faith = root.faith
				culture = root.culture
				save_scope_as = match_option_triplets_2
			}
			create_character = {
				template = triplets_female
				dynasty = none
				location = root.location
				faith = root.faith
				culture = root.culture
				save_scope_as = match_option_triplets_3
			}
		}
		else = {
			create_character = {
				template = triplets_male
				dynasty = none
				location = root.location
				faith = root.faith
				culture = root.culture
				save_scope_as = match_option_triplets_1
			}
			create_character = {
				template = triplets_male
				dynasty = none
				location = root.location
				faith = root.faith
				culture = root.culture
				save_scope_as = match_option_triplets_2
			}
			create_character = {
				template = triplets_male
				dynasty = none
				location = root.location
				faith = root.faith
				culture = root.culture
				save_scope_as = match_option_triplets_3
			}
		}
	}
}

## Incest ##
find_family_option_effect = {
	debug_log = "finding family option"
	
	if = {
		limit = {
			OR = {
				culture = {
					has_cultural_parameter = allows_unrestricted_marriage
				}
				faith = {
					has_doctrine = tenet_divine_marriage
				}
			}
		}

		if = {
			limit = {
				scope:match_recipient = {
					is_female = no
				}
			}
			random_living_character = { 
				limit = {
					is_suitable_female_elf_spouse = yes
					is_close_or_extended_family_of = scope:match_recipient
				}

				debug_log = "Assigning match_option_family 1"

				save_scope_as = match_option_family
			}
		}
		else = {
			random_living_character = { 
				limit = {
					is_suitable_male_elf_spouse = yes
					is_close_or_extended_family_of = scope:match_recipient
				}

				debug_log = "Assigning match_option_family 2"

				save_scope_as = match_option_family
			}
		}
	}
}

# TODO: clean up the character cleanups

# Choices
choose_aeluran_match_option_effect = {
	add_courtier = scope:match_option_aeluran
	if = {
		# SHOULD BE IMPOSSIBLE: F/F
		limit = {
			scope:match_recipient = {
				is_female = yes 
			} 
		}
		scope:match_recipient = {
			marry_matrilineal = scope:match_option_aeluran
		}
	}
	else = {
		scope:match_recipient = {
			marry = scope:match_option_aeluran
		}
	}

	cleanup_generated_breeder_characters_effect = yes
}

choose_alliance_match_option_effect = {
	add_courtier = scope:match_option_alliance
	if = {
		# SHOULD BE IMPOSSIBLE: F/F
		limit = {
			scope:match_recipient = {
				is_female = yes 
			} 
		}
		scope:match_recipient = {
			marry_matrilineal = scope:match_option_alliance
		}
	}
	else = {
		scope:match_recipient = {
			marry = scope:match_option_alliance
		}
	}

	cleanup_generated_breeder_characters_effect = yes
	cleanup_generated_aeluran_characters_effect = yes
}

choose_breeding_stock_match_option_effect = {
	add_courtier = scope:match_option_breeding_stock
	if = {
		# SHOULD BE IMPOSSIBLE: F/F
		limit = {
			scope:match_recipient = {
				is_female = yes 
			} 
		}
		scope:match_recipient = {
			marry_matrilineal = scope:match_option_breeding_stock
		}
	}
	else = {
		scope:match_recipient = {
			marry = scope:match_option_breeding_stock
		}
	}

	cleanup_generated_aeluran_characters_effect = yes
}

choose_family_match_option_effect = {
	add_courtier = scope:match_option_family
	if = {
		limit = {
			scope:match_recipient = {
				is_female = yes 
			} 
		}
		scope:match_recipient = {
			marry_matrilineal = scope:match_option_family
		}
	}
	else = {
		scope:match_recipient = {
			marry = scope:match_option_family
		}
	}

	cleanup_generated_breeder_characters_effect = yes
	cleanup_generated_aeluran_characters_effect = yes
}

choose_twins_match_option_effect = {
	add_courtier = scope:match_option_twins_1
	add_courtier = scope:match_option_twins_2
	if = {
		limit = {
			scope:match_recipient = {
				is_female = yes 
			} 
		}
		scope:match_recipient = {
			marry_matrilineal = scope:match_option_twins_1
			marry_matrilineal = scope:match_option_twins_2
		}
	}
	else = {
		scope:match_recipient = {
			marry = scope:match_option_twins_1
			marry = scope:match_option_twins_2
		}
	}

	cleanup_generated_breeder_characters_effect = yes
	cleanup_generated_aeluran_characters_effect = yes
}

choose_triplets_match_option_effect = {
	add_courtier = scope:match_option_triplets_1
	add_courtier = scope:match_option_triplets_2
	add_courtier = scope:match_option_triplets_3
	if = {
		limit = {
			scope:match_recipient = {
				is_female = yes 
			} 
		}
		scope:match_recipient = {
			marry_matrilineal = scope:match_option_triplets_1
			marry_matrilineal = scope:match_option_triplets_2
			marry_matrilineal = scope:match_option_triplets_3
		}
	}
	else = {
		scope:match_recipient = {
			marry = scope:match_option_triplets_1
			marry = scope:match_option_triplets_2
			marry = scope:match_option_triplets_3
		}
	}

	cleanup_generated_breeder_characters_effect = yes
	cleanup_generated_aeluran_characters_effect = yes
}

# Remove unused Generated Characters
cleanup_generated_breeder_characters_effect = {
	hidden_effect = {
		if = {
			limit = {
				exists = scope:breeder_generated
			}

			scope:match_option_breeding_stock = {
				death = {
					death_reason = death_disappearance
				}
			}
		}
	}
}

cleanup_generated_aeluran_characters_effect = {
	hidden_effect = {
		if = {
			limit = {
				exists = scope:aeluran_generated
			}

			scope:match_option_aeluran = {
				death = {
					death_reason = death_disappearance
				}
			}
		}
	}
}

# - match_option_breeding_stock_2 needs desciption, and all the other event window shenanigans
resolve_duplicate_character_match_effect = {
	if = { # Aeluran = Family
		limit = {
			AND = {
				exists = scope:match_option_aeluran
				exists = scope:match_option_family
				scope:match_option_aeluran = scope:match_option_family
			}
		}

		debug_log = "Aeluran = Family correction"

		# keep family, random assign a generated aeluran
		save_scope_value_as = {
			name = aeluran_generated
			value = 1
		}
		create_character = {
			template = aeluran_sister_match
			dynasty = none
			location = root.location
			faith = root.faith
			culture = root.culture
			save_scope_as = match_option_aeluran
		}
	}
	if = { # Aeluran = Alliance
		limit = {
			AND = {
				exists = scope:match_option_aeluran
				exists = scope:match_option_alliance
				scope:match_option_aeluran = scope:match_option_alliance
			}
		}

		debug_log = "Aeluran = Alliance correction"

		# keep alliance, random assign a generated aeluran
		save_scope_value_as = {
			name = aeluran_generated
			value = 1
		}
		create_character = {
			template = aeluran_sister_match
			dynasty = none
			location = root.location
			faith = root.faith
			culture = root.culture
			save_scope_as = match_option_aeluran
		}
	}
	if = { # Family = Alliance
		limit = {
			AND = {
				exists = scope:match_option_family
				exists = scope:match_option_alliance
				scope:match_option_family = scope:match_option_alliance
			}
		}

		debug_log = "Aeluran = Alliance correction"
		
		# remove family for now, swap it for another breeder
		if = {
			limit = {
				scope:match_choice_$MATCHID$ = flag:family
			}
			save_scope_value_as = {
				name = match_choice_1
				value = flag:breeding_stock_2
			}
		}
		if = {
			limit = {
				scope:match_choice_2 = flag:family
			}
			save_scope_value_as = {
				name = match_choice_2
				value = flag:breeding_stock_2
			}
		}
		if = {
			limit = {
				scope:match_choice_3 = flag:family
			}
			save_scope_value_as = {
				name = match_choice_3
				value = flag:breeding_stock_2
			}
		}

		clear_saved_scope = match_option_family


		generate_breeding_stock_match_option_effect = {
			SCOPE = match_option_breeding_stock_2
		}

		save_scope_value_as = {
			name = breeder_2_generated
			value = 1
		}
	}
}
