determine_match_candidate_count = {
	# Crystal "Donation"
}

# determine_match_quality = {
# 	# Aeluran Respect (maybe we should remove title level from respect?)
# 	determine_aeluran_respect_score = yes
	
# 	# Crystal "Donation"

# 	# Title Level
# }

determine_aeluran_respect_score = {
	# check if the character has a score set as var, if not generate the score
	if = {
		limit = {
			NOT = {
				exists = var:aeluran_respect_change
			}
		}
		set_variable = {
			name = aeluran_respect_change
			value = aeluran_respect_score
		}
	}

	# TODO: lets refactor respect change thresholds to scripted values so they are easily maintainable
	# esepcially since the change values are not final yet
	if = {
		limit = {
			var:aeluran_respect_change <= -3
		}

		save_scope_value_as = {
			name = aeluran_matchmaking_respect_score
			value = flag:very_high
		}
	}
	if = {
		limit = {
			var:aeluran_respect_change <= -1
		}

		save_scope_value_as = {
			name = aeluran_matchmaking_respect_score
			value = flag:high
		}
	}
	if = {
		limit = {
			var:aeluran_respect_change > -1
			var:aeluran_respect_change < 1
		}

		save_scope_value_as = {
			name = aeluran_matchmaking_respect_score
			value = flag:neutral
		}
	}
	if = {
		limit = {
			var:aeluran_respect_change >= 1
			var:aeluran_respect_change < 3
		}

		save_scope_value_as = {
			name = aeluran_matchmaking_respect_score
			value = flag:low_respect
		}
	}
	if = {
		limit = {
			var:aeluran_respect_change >= 3
		}

		save_scope_value_as = {
			name = aeluran_matchmaking_respect_score
			value = flag:no_respect
		}
	}
}

map_match_candidate_type = {
	$MATCH_TYPE$ = {
		save_scope_as = candidate_type
	}
}
map_match_candidate = {
	$MATCH_CHOICE$ = {
		save_scope_as = candidate
	}
}


generate_matchmaking_candidates_effect = {
	generate_new_matchmaking_candidate = { MATCHID = 1 }
	generate_new_matchmaking_candidate = { MATCHID = 2 }
	generate_new_matchmaking_candidate = { MATCHID = 3 }


	# if = {
	# 	limit = {
	# 		exists = scope:match_choice_1_type
	# 		NOR = {
	# 			scope:match_choice_1_type = flag:twins
	# 			scope:match_choice_1_type = flag:triplets
	# 		}
	# 	}
	# 	generate_new_matchmaking_candidate = { MATCHID = 2 }
	# }

	# if = {
	# 	limit = {
	# 		OR = {
	# 			exists = scope:match_choice_2_type
	# 			scope:match_choice_1_type = flag:twins
	# 		}
	# 		NOR = {
	# 			scope:match_choice_1_type = flag:triplets
	# 			scope:match_choice_2_type = flag:twins
	# 		}
	# 	}
	# 	generate_new_matchmaking_candidate = { MATCHID = 3 }
	# }
}

# TODO:
# - adviser herself
# - jailed rogue

# - marry_matrilineal should maybe be respect related, think about alliances

# - spark crystal to boost lucky candidate chance

# - Aeluran respect mechanic 

# - snooze feature

# - AI should get matchmaking 

# tribal wear

# could have matches of multiple categories
# - could handle with TAGS
# 	- aeluran
# 	- alliance
# 	- multi
# 	- family
# 	- bloodline

# aeluran options should be mutually exclusive

# should update DNA on a few characters, calmera/meldrid for example

# TODO: if heir is not your child, you shouldnt be matchmaking for them!

generate_new_matchmaking_candidate = {
	set_variable = {
		name = candidate_quality
		value = matchmaking_candidate_quality
	}
	
	random_list = {
		# lets split off from standard elf - slightly/moderatly/highly genetically gifted 
		#									elves for more diversity among quality levels
		0 = { # Default Standard Elf
			modifier = {
				add = 100
				NOT = {
					any_in_list = {
						list = selected_match_types
						this = flag:standard_elf
					}
				}
			}
			modifier = {
				add = 50
				any_in_list = {
					list = selected_match_types
					this = flag:standard_elf
				}
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:standard_elf
			}

			scope:match_choice_$MATCHID$_type = {
				add_to_list = selected_match_types
			}

			find_standard_elf_match_choice = { MATCHID = $MATCHID$ }
		}
		0 = { # Aeluran Adviser Herself
			modifier = {
				add = 100
				is_female = no

				# TODO: this wont work for landed heir's adviser
				cp:councillor_aeluran_advisor = {
					is_acceptable_aeluran_adviser_match_choice = yes
				}

				NOT = {
					any_in_list = {
						list = selected_match_types
						this = flag:aeluran_adviser
					}
				}
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:aeluran_adviser
			}

			scope:match_choice_$MATCHID$_type = {
				add_to_list = selected_match_types
			}

			find_aeluran_adviser_as_match_choice = { MATCHID = $MATCHID$ }
		}
		0 = { # Aeluran Sister
			modifier = {
				add = 100
				is_female = no

				NOT = {
					any_in_list = {
						list = selected_match_types
						this = flag:aeluran_sister
					}
				}
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:aeluran_sister
			}

			scope:match_choice_$MATCHID$_type = {
				add_to_list = selected_match_types
			}

			find_aeluran_sister_match_choice = { MATCHID = $MATCHID$ }
		}
		0 = { # Aeluran Matron
			modifier = {
				add = 50
				is_female = no
				var:candidate_quality >= 4

				NOT = {
					any_in_list = {
						list = selected_match_types
						this = flag:aeluran_matron
					}
				}
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:aeluran_matron
			}

			scope:match_choice_$MATCHID$_type = {
				add_to_list = selected_match_types
			}

			find_aeluran_matron_match_choice = { MATCHID = $MATCHID$ }
		}
		0 = { # Aeluran Matriarch
			modifier = {
				add = 50
				var:candidate_quality >= 5
				is_female = no

				NOT = {
					any_in_list = {
						list = selected_match_types
						this = flag:aeluran_matriarch
					}
				}
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:aeluran_matriarch
			}

			scope:match_choice_$MATCHID$_type = {
				add_to_list = selected_match_types
			}

			find_aeluran_matriarch_match_choice = { MATCHID = $MATCHID$ }
		}
		0 = { # Aeluran Genetic Project
			modifier = {
				add = 50

				NOT = {
					any_in_list = {
						list = selected_match_types
						this = flag:genetic_project
					}
				}
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:genetic_project
			}

			scope:match_choice_$MATCHID$_type = {
				add_to_list = selected_match_types
			}

			find_aeluran_genetic_project_match_choice = { MATCHID = $MATCHID$ }
		}
		0 = { # Family
			modifier = {
				add = 100
				root = { 
					OR = {
						culture = {
							has_cultural_parameter = allows_unrestricted_marriage
						}
						faith = {
							has_doctrine = tenet_divine_marriage
						}
					}
				}
				preexisting_family_member_exists = yes

				NOT = {
					any_in_list = {
						list = selected_match_types
						this = flag:family
					}
				}
			}
			modifier = {
				add = 30
				root = { 
					OR = {
						culture = {
							has_cultural_parameter = allows_unrestricted_marriage
						}
						faith = {
							has_doctrine = tenet_divine_marriage
						}
					}
				}
				preexisting_family_member_exists = yes

				any_in_list = {
					list = selected_match_types
					this = flag:family
				}
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:family
			}

			scope:match_choice_$MATCHID$_type = {
				add_to_list = selected_match_types
			}

			find_family_member_match_choice = { MATCHID = $MATCHID$ }
		}
		0 = { # Bloodline Trait
			modifier = {
				add = 25
				var:candidate_quality >= 3
				NOT = {
					any_in_list = {
						list = selected_match_types
						this = flag:bloodline_trait
					}
				}
			}
			modifier = {
				add = 10
				var:candidate_quality >= 3
				any_in_list = {
					list = selected_match_types
					this = flag:bloodline_trait
				}
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:bloodline_trait
			}

			scope:match_choice_$MATCHID$_type = {
				add_to_list = selected_match_types
			}

			find_bloodline_holder_match_choice = { MATCHID = $MATCHID$ }
		}
		0 = { # Alliance
			modifier = {
				add = 75
				preexisting_alliance_exists = yes
				var:candidate_quality >= 2
				NOT = {
					any_in_list = {
						list = selected_match_types
						this = flag:alliance
					}
				}
			}
			modifier = {
				add = 25
				preexisting_alliance_exists = yes
				var:candidate_quality >= 2
				any_in_list = {
					list = selected_match_types
					this = flag:alliance
				}
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:alliance
			}

			scope:match_choice_$MATCHID$_type = {
				add_to_list = selected_match_types
			}

			find_alliance_match_choice = { MATCHID = $MATCHID$ }
		}
		0 = { # Warrior
			modifier = {
				add = 100
				var:candidate_quality >= 2
				NOT = {
					any_in_list = {
						list = selected_match_types
						this = flag:warrior
					}
				}
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:warrior
			}

			scope:match_choice_$MATCHID$_type = {
				add_to_list = selected_match_types
			}

			find_tribal_warrior_match_choice = { MATCHID = $MATCHID$ }
		}
		0 = { # Wisewomen/man, skilled healer
			modifier = {
				add = 100
				var:candidate_quality >= 2
				NOT = {
					any_in_list = {
						list = selected_match_types
						this = flag:wisemen
					}
				}
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:wisemen
			}

			scope:match_choice_$MATCHID$_type = {
				add_to_list = selected_match_types
			}

			find_wiseman_match_choice = { MATCHID = $MATCHID$ }
		}
		0 = { # Bastard Claimant
			modifier = {
				add = 40
				var:candidate_quality >= 2
				NOT = {
					any_in_list = {
						list = selected_match_types
						this = flag:bastard_claimant
					}
				}
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:bastard_claimant
			}

			scope:match_choice_$MATCHID$_type = {
				add_to_list = selected_match_types
			}

			find_bastard_claimant_match_choice = { MATCHID = $MATCHID$ }
		}
		0 = { # Inferior Dowry Elf
			modifier = {
				add = 50
				var:candidate_quality >= 1
				NOT = {
					any_in_list = {
						list = selected_match_types
						this = flag:inferior_dowry
					}
				}
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:inferior_dowry
			}

			scope:match_choice_$MATCHID$_type = {
				add_to_list = selected_match_types
			}

			find_inferior_dowry_elf_match_choice = { MATCHID = $MATCHID$ }
		}
		0 = { # Foreign Elf
			modifier = {
				add = 100
				var:candidate_quality >= 1
				NOT = {
					any_in_list = {
						list = selected_match_types
						this = flag:foreign_elf
					}
				}
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:foreign_elf
			}

			scope:match_choice_$MATCHID$_type = {
				add_to_list = selected_match_types
			}

			find_foreign_elf_match_choice = { MATCHID = $MATCHID$ }
		}
		0 = { # Twins
			modifier = {
				add = 100
				var:candidate_quality >= 4

				NOT = {
					$MATCHID$ = 3 
				}

				NOT = {
					any_in_list = {
						list = selected_match_types
						this = flag:twins
					}
				}
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:twins
			}

			scope:match_choice_$MATCHID$_type = {
				add_to_list = selected_match_types
			}

			find_twins_match_choice = { MATCHID = $MATCHID$ }
		}
		0 = { # Triplets
			modifier = {
				add = 100
				var:candidate_quality >= 5

				NOR = {
					$MATCHID$ = 2
					$MATCHID$ = 3
				}

				NOT = {
					any_in_list = {
						list = selected_match_types
						this = flag:triplets
					}
				}
			}

			save_scope_value_as = {
				name = match_choice_$MATCHID$_type
				value = flag:triplets
			}

			scope:match_choice_$MATCHID$_type = {
				add_to_list = selected_match_types
			}

			find_triplets_match_choice = { MATCHID = $MATCHID$ }
		}
	}
}

assign_matchmaking_candidate_portraits_effect = {
	if = {
		limit = {
			exists = scope:candidate_type
			NOR = {
				scope:candidate_type = flag:twins
				scope:candidate_type = flag:triplets
			}
		}
		scope:match_choice_$MATCHID$ = {
			save_scope_as = right_portrait_match
		}
	}
	if = {
		limit = {
			exists = scope:candidate_type
			OR = {
				scope:candidate_type = flag:twins
				scope:candidate_type = flag:triplets
			}
		}
		scope:match_choice_$MATCHID$_1 = {
			save_scope_as = left_portrait_match
		}
		scope:match_choice_$MATCHID$_2 = {
			save_scope_as = right_portrait_match
		}
	}
	if = {
		limit = {
			exists = scope:candidate_type
			scope:candidate_type = flag:triplets
		}
		scope:match_choice_$MATCHID$_3 = {
			save_scope_as = center_portrait_match
		}
	}
}

assign_matchmaking_candidate_portraits_final_selection_effect = {
	# Right Portrait
	if = {
		limit = {
			exists = scope:match_choice_3
			exists = scope:match_choice_3_type
			NOR = {
				scope:match_choice_3_type = flag:twins
				scope:match_choice_3_type = flag:triplets
			}
		}
		scope:match_choice_3 = {
			save_scope_as = right_portrait_match
		}
	}
	else_if = {
		limit = {
			exists = scope:match_choice_3
			exists = scope:match_choice_3_type
			OR = {
				scope:match_choice_3_type = flag:twins
				scope:match_choice_3_type = flag:triplets
			}
		}
		if = {
			limit = {
				scope:match_choice_3_type = flag:twins
			}
			scope:match_choice_3_1 = {
				save_scope_as = right_portrait_match
			}
			scope:match_choice_3_2 = {
				save_scope_as = lower_center_portrait_match
			}
		}
		else_if = {
			limit = {
				scope:match_choice_3_type = flag:triplets
			}

			scope:match_choice_3_1 = {
				save_scope_as = right_portrait_match
			}
			scope:match_choice_3_2 = {
				save_scope_as = lower_center_portrait_match
			}
			scope:match_choice_3_3 = {
				save_scope_as = lower_left_portrait_match
			}
		}
	}

	# Center Portrait
	if = {
		limit = {
			exists = scope:match_choice_2
			exists = scope:match_choice_2_type
			NOR = {
				scope:match_choice_2_type = flag:twins
				scope:match_choice_2_type = flag:triplets
			}
		}

		scope:match_choice_2 = {
			save_scope_as = center_portrait_match
		}
	}
	else_if = {
		limit = {
			exists = scope:match_choice_2
			exists = scope:match_choice_2_type
			OR = {
				scope:match_choice_2_type = flag:twins
				scope:match_choice_2_type = flag:triplets
			}
		}
		if = {
			limit = {
				scope:match_choice_2_type = flag:twins
			}

			scope:match_choice_2_1 = {
				save_scope_as = center_portrait_match
			}
			scope:match_choice_2_2 = {
				save_scope_as = lower_center_portrait_match
			}
		}
		else_if = {
			limit = {
				scope:match_choice_2_type = flag:triplets
			}

			scope:match_choice_2_1 = {
				save_scope_as = center_portrait_match
			}
			scope:match_choice_2_2 = {
				save_scope_as = lower_center_portrait_match
			}
			scope:match_choice_2_3 = {
				save_scope_as = lower_left_portrait_match
			}
		}
	}

	# Left Portrait
	if = {
		limit = {
			exists = scope:match_choice_1
			exists = scope:match_choice_1_type
			NOR = {
				scope:match_choice_1_type = flag:twins
				scope:match_choice_1_type = flag:triplets
			}
		}
		scope:match_choice_1 = {
			save_scope_as = left_portrait_match
		}
	}
	else_if = {
		limit = {
			exists = scope:match_choice_1
			exists = scope:match_choice_1_type
			OR = {
				scope:match_choice_1_type = flag:twins
				scope:match_choice_1_type = flag:triplets
			}
		}
		if = {
			limit = {
				scope:match_choice_1_type = flag:twins
			}

			scope:match_choice_1_1 = {
				save_scope_as = left_portrait_match
			}
			scope:match_choice_1_2 = {
				save_scope_as = lower_center_portrait_match
			}
		}
		else_if = {
			limit = {
				scope:match_choice_2_type = flag:triplets
			}

			scope:match_choice_1_1 = {
				save_scope_as = left_portrait_match
			}
			scope:match_choice_1_2 = {
				save_scope_as = lower_center_portrait_match
			}
			scope:match_choice_1_3 = {
				save_scope_as = lower_left_portrait_match
			}
		}
	}
}

selection_option_bonus_effects = {
	$MATCH_CHOICE_TYPE$ = { save_scope_as = match_choice_type }

	if = {
		limit = {
			scope:match_choice_type = flag:aeluran_adviser
		}
		aeluran_adviser_match_choice_effect = { MATCH_CHOICE_TYPE = scope:match_choice_type }
	}
	if = {
		limit = {
			scope:match_choice_type = flag:aeluran_sister
		}
		aeluran_sister_match_choice_effect = { MATCH_CHOICE_TYPE = scope:match_choice_type }
	}
	if = {
		limit = {
			scope:match_choice_type = flag:aeluran_matron
		}
		aeluran_matron_match_choice_effect = { MATCH_CHOICE_TYPE = scope:match_choice_type }
	}
	if = {
		limit = {
			scope:match_choice_type = flag:aeluran_matriarch
		}
		aeluran_matriarch_match_choice_effect = { MATCH_CHOICE_TYPE = scope:match_choice_type }
	}
	if = {
		limit = {
			scope:match_choice_type = flag:genetic_project
		}
		aeluran_genetic_project_match_choice_effect = { MATCH_CHOICE_TYPE = scope:match_choice_type }
	}
	if = {
		limit = {
			scope:match_choice_type = flag:inferior_dowry
		}
		inferior_dowry_elf_match_choice_effect = yes
	}
}

# ===== STANDARD ELF =====

find_standard_elf_match_choice = {
	if = {
		limit = {
			preexisting_standard_elf_exists = yes
		}
		assign_preexisting_standard_elf = { MATCHID = $MATCHID$ }
	}
	else = {
		generate_new_standard_elf = { MATCHID = $MATCHID$ }
	}
}

assign_preexisting_standard_elf = {
	random_living_character = {
		limit = {
			is_acceptable_standard_elf_match_choice = yes
		}
		save_scope_as = match_choice_$MATCHID$
	}
}

generate_new_standard_elf = {
	create_character = {
		template = standard_elf_match
		gender_female_chance = matchmaking_female_gender_chance
		dynasty = none
		location = root.location
		faith = root.faith
		culture = root.culture
		save_scope_as = match_choice_$MATCHID$
	}
}

# ===== AELURAN ADVISER =====
# TODO:
# - adviser chosen for heir
# - if heir is lord, make their adviser an option
find_aeluran_adviser_as_match_choice = {
	if = {
		limit = {
			cp:councillor_aeluran_advisor = {
				is_acceptable_aeluran_adviser_match_choice = yes
			}
		}
		assign_lords_aeluran_adviser = { MATCHID = $MATCHID$ }
	}
}

assign_lords_aeluran_adviser = {
	cp:councillor_aeluran_advisor = {
		save_scope_as = match_choice_$MATCHID$
	}
}

aeluran_adviser_match_choice_effect = {
	$MATCH_CHOICE_TYPE$ = { save_scope_as = match_choice_type }

	add_piety = aeluran_order_match_choice_piety_bonus
}

# ===== AELURAN SISTER =====

find_aeluran_sister_match_choice = {
	if = {
		limit = {
			preexisting_aeluran_sister_exists = yes
		}
		assign_preexisting_aeluran_sister = { MATCHID = $MATCHID$ }
	}
	else = {
		generate_new_aeluran_sister = { MATCHID = $MATCHID$ }
	}
}

assign_preexisting_aeluran_sister = {
	random_living_character = {
		limit = {
			is_acceptable_aeluran_sister_match_choice = yes
		}
		save_scope_as = match_choice_$MATCHID$
	}
}

generate_new_aeluran_sister = {
	create_character = {
		template = aeluran_sister_match
		dynasty = none
		location = root.location
		culture = root.culture
		save_scope_as = match_choice_$MATCHID$
	}
}

aeluran_sister_match_choice_effect = {
	$MATCH_CHOICE_TYPE$ = { save_scope_as = match_choice_type }

	add_piety = aeluran_order_match_choice_piety_bonus
}

# ===== AELURAN MATRON =====

find_aeluran_matron_match_choice = {
	if = {
		limit = {
			preexisting_aeluran_matron_exists = yes
		}
		assign_preexisting_aeluran_matron = { MATCHID = $MATCHID$ }
	}
	else = {
		generate_new_aeluran_matron = { MATCHID = $MATCHID$ }
	}
}

assign_preexisting_aeluran_matron = {
	random_living_character = {
		limit = {
			is_acceptable_aeluran_matron_match_choice = yes
		}
		save_scope_as = match_choice_$MATCHID$
	}
}

generate_new_aeluran_matron = {
	create_character = {
		template = aeluran_matron_match
		dynasty = none
		location = root.location
		culture = root.culture
		save_scope_as = match_choice_$MATCHID$
	}
}

aeluran_matron_match_choice_effect = {
	$MATCH_CHOICE_TYPE$ = { save_scope_as = match_choice_type }

	add_piety = aeluran_order_match_choice_piety_bonus
}
# ===== AELURAN MATRIARCH =====

find_aeluran_matriarch_match_choice = {
	if = {
		limit = {
			preexisting_aeluran_matriarch_exists = yes
		}
		assign_preexisting_aeluran_matriarch = { MATCHID = $MATCHID$ }
	}
}

assign_preexisting_aeluran_matriarch = {
	random_living_character = {
		limit = {
			is_acceptable_aeluran_matriarch_match_choice = yes
		}
		save_scope_as = match_choice_$MATCHID$
	}
}

aeluran_matriarch_match_choice_effect = {
	$MATCH_CHOICE_TYPE$ = { save_scope_as = match_choice_type }

	add_piety = aeluran_order_match_choice_piety_bonus
}

# ===== AELURAN GENETIC PROJECT =====

find_aeluran_genetic_project_match_choice = {
	generate_new_aeluran_genetic_project = { MATCHID = $MATCHID$ }
}

generate_new_aeluran_genetic_project = {

	create_character = {
		template = aeluran_genetic_project_match
		gender_female_chance = matchmaking_female_gender_chance
		dynasty = none
		location = root.location
		faith = root.faith
		culture = root.culture
		save_scope_as = match_choice_$MATCHID$
	}
}

aeluran_genetic_project_match_choice_effect = {
	$MATCH_CHOICE_TYPE$ = { save_scope_as = match_choice_type }

	add_piety = aeluran_order_match_choice_piety_bonus
}

# ===== FAMILY MEMBER =====

find_family_member_match_choice = {
	if = {
		limit = {
			preexisting_family_member_exists = yes
		}
		assign_preexisting_family_member = { MATCHID = $MATCHID$ }
	}
}

assign_preexisting_family_member = {
	random_living_character = {
		limit = {
			is_acceptable_family_member_match_choice = yes
		}
		save_scope_as = match_choice_$MATCHID$
	}
}

# ===== BLOODLINE HOLDER =====

find_bloodline_holder_match_choice = {
	if = {
		limit = {
			preexisting_bloodline_holder_exists = yes
		}
		assign_preexisting_bloodline_holder = { MATCHID = $MATCHID$ }
	}
	else = {
		generate_new_bloodline_holder = { MATCHID = $MATCHID$ }
	}
}

assign_preexisting_bloodline_holder = {
	random_living_character = {
		limit = {
			is_acceptable_bloodline_holder_match_choice = yes
		}
		save_scope_as = match_choice_$MATCHID$
	}
}

generate_new_bloodline_holder = {
	random_list = {
		10 = {
			save_scope_value_as = {
				name = bloodline_holder_type
				value = flag:valerith
			} 
		}
		10 = {
			save_scope_value_as = {
				name = bloodline_holder_type
				value = flag:serelion
			} 
		}
		10 = {
			save_scope_value_as = {
				name = bloodline_holder_type
				value = flag:gwynthorn
			} 
		}
		10 = {
			save_scope_value_as = {
				name = bloodline_holder_type
				value = flag:thundarael
			} 
		}
		10 = {
			save_scope_value_as = {
				name = bloodline_holder_type
				value = flag:daelurin
			} 
		}
	}

	create_character = {
		template = bloodline_holder_match
		gender_female_chance = matchmaking_female_gender_chance
		dynasty = none
		location = root.location
		faith = root.faith
		culture = root.culture
		save_scope_as = match_choice_$MATCHID$
	}
}

# ===== ALLIANCE =====

find_alliance_match_choice = {
	if = {
		limit = {
			preexisting_alliance_exists = yes
		}
		assign_preexisting_alliance = { MATCHID = $MATCHID$ }
	}
}

assign_preexisting_alliance = {
	random_living_character = {
		limit = {
			is_acceptable_alliance_match_choice = yes
		}
		if = {
			limit = {
				this = {
					is_suitable_elf_spouse = yes
				}
			}
			this = {
				save_scope_as = match_choice_$MATCHID$
			}
		}
		else = {
			this = {
				random_child = {
					limit = {
						is_suitable_elf_spouse = yes
					}
					save_scope_as = match_choice_$MATCHID$
				}
			}
		}
	}
}

# ===== TRIBAL WARRIOR =====

find_tribal_warrior_match_choice = {
	generate_new_tribal_warrior = { MATCHID = $MATCHID$ }
}

generate_new_tribal_warrior = {
	create_character = {
		template = tribal_warrior_match
		gender_female_chance = matchmaking_female_gender_chance
		dynasty = none
		location = root.location
		faith = root.faith
		culture = root.culture
		save_scope_as = match_choice_$MATCHID$
	}
}

# ===== WISEMAN =====

find_wiseman_match_choice = {
	generate_new_wiseman = { MATCHID = $MATCHID$ }
}

generate_new_wiseman = {
	create_character = {
		template = wiseman_match
		gender_female_chance = matchmaking_female_gender_chance
		dynasty = none
		location = root.location
		faith = root.faith
		culture = root.culture
		save_scope_as = match_choice_$MATCHID$
	}
}

# ===== BASTARD CLAIMANT =====

find_bastard_claimant_match_choice = {
	find_lord_parent = yes
	generate_new_bastard_claimant = { MATCHID = $MATCHID$ }
}

find_lord_parent = {
	random_living_character = {
		limit = {
			is_acceptable_bastard_claimant_parent = yes
		}
		save_scope_as = bastard_claimant_parent
	}
}

generate_new_bastard_claimant = {
	create_character = {
		template = bastard_claimant_match
		gender_female_chance = matchmaking_female_gender_chance
		dynasty_house = scope:bastard_claimant_parent.house
		location = root.location
		faith = scope:bastard_claimant_parent.faith
		culture = scope:bastard_claimant_parent.culture
		save_scope_as = match_choice_$MATCHID$

		after_creation = {
			if = {
				limit = {
					scope:bastard_claimant_parent = {
						is_female = yes
					}
				}
				set_mother = scope:bastard_claimant_parent
			}
			else = {
				set_real_father = scope:bastard_claimant_parent
			}
	
			add_pressed_claim = scope:bastard_claimant_parent.primary_title

			set_relation_rival = {
				target = scope:bastard_claimant_parent
				reason = bastard_claimant
			}
		}
	}

	# VVVV Add to option VVVV
	# set_relation_rival = {
	# 	target = scope:bastard_claimant_parent
	# 	reason = sheltered_bastard_claimant
	# }
}

# ===== INFERIOR DOWRY ELF =====

find_inferior_dowry_elf_match_choice = {
	if = {
		limit = {
			preexisting_inferior_dowry_elf_exists = yes
		}
		assign_preexisting_inferior_dowry_elf = { MATCHID = $MATCHID$ }
	}
	else = {
		generate_new_inferior_dowry_elf = { MATCHID = $MATCHID$ }
	}
}

assign_preexisting_inferior_dowry_elf = {
	random_living_character = {
		limit = {
			is_acceptable_inferior_dowry_elf_match_choice = yes
		}
		save_scope_as = match_choice_$MATCHID$
	}
}

generate_new_inferior_dowry_elf = {
	create_character = {
		template = inferior_dowry_elf_match
		gender_female_chance = matchmaking_female_gender_chance
		dynasty = none
		location = root.location
		faith = root.faith
		culture = root.culture
		save_scope_as = match_choice_$MATCHID$
	}
}

inferior_dowry_elf_match_choice_effect = {
	add_gold = inferior_elf_match_dowry
}

# ===== FOREIGN ELF =====

find_foreign_elf_match_choice = {
	if = {
		limit = {
			preexisting_foreign_elf_exists = yes
		}
		assign_preexisting_foreign_elf = { MATCHID = $MATCHID$ }
	}
	else = {
		find_foreigner_to_copy_culture = yes
		generate_new_foreign_elf = { MATCHID = $MATCHID$ }
	}
}

assign_preexisting_foreign_elf = {
	random_living_character = {
		limit = {
			is_acceptable_foreign_elf_match_choice = yes
		}

		if = {
			limit = {
				NOT = {
					has_trait = lifestyle_traveler
				}
			}
			add_trait = lifestyle_traveler
			add_trait_xp = {
				trait = lifestyle_traveler
				track = travel
				value = {
					integer_range = {
						min = 70
						max = 100
					}
				}
			}
			add_trait_xp = {
				trait = lifestyle_traveler
				track = danger
				value = {
					integer_range = {
						min = 70
						max = 100
					}
				}
			}
		}
		if = {
			limit = {
				NOT = {
					has_trait = adventurer
				}
			}
			add_trait = adventurer
			add_trait_xp = {
				trait = adventurer
				value = {
					integer_range = {
						min = 70
						max = 100
					}
				}
			}
		}

		save_scope_as = match_choice_$MATCHID$
	}
}

find_foreigner_to_copy_culture = {
	random_living_character = {
		limit = {
			NOT = {
				is_within_diplo_range = { CHARACTER = root }
			}
			NOT = {
				culture = root.culture
			}
		}

		save_scope_as = foreign_person
	}
}

generate_new_foreign_elf = {
	create_character = {
		template = foreign_elf_match
		gender_female_chance = matchmaking_female_gender_chance
		dynasty = none
		location = root.location
		faith = root.faith
		culture = scope:foreign_person.culture
		save_scope_as = match_choice_$MATCHID$
	}
}

# ===== TWINS =====

find_twins_match_choice = {
	generate_multi_birth_mother = yes
	generate_new_twins = { MATCHID = $MATCHID$ }
}

generate_multi_birth_mother = {
	create_character = {
		template = match_choice_multi_mother
		gender_female_chance = matchmaking_female_gender_chance
		dynasty = none
		location = root.location
		faith = root.faith
		culture = root.culture
		save_scope_as = match_choice_multi_mother
	}
}

generate_new_twins = {
	create_character = {
		template = twins_match
		gender_female_chance = matchmaking_female_gender_chance
		mother = scope:match_choice_multi_mother
		dynasty = none
		location = root.location
		faith = root.faith
		culture = root.culture
		save_scope_as = match_choice_$MATCHID$_1
	}
	create_character = {
		template = twins_match
		gender_female_chance = matchmaking_female_gender_chance
		mother = scope:match_choice_multi_mother
		dynasty = none
		location = root.location
		faith = root.faith
		culture = root.culture
		save_scope_as = match_choice_$MATCHID$_2
	}
}

# ===== TRIPLETS =====

find_triplets_match_choice = {
	generate_multi_birth_mother = yes
	generate_new_triplets = { MATCHID = $MATCHID$ }
}

generate_multi_birth_mother = {
	create_character = {
		template = match_choice_multi_mother
		gender_female_chance = matchmaking_female_gender_chance
		dynasty = none
		location = root.location
		faith = root.faith
		culture = root.culture
		save_scope_as = match_choice_multi_mother
	}
}

generate_new_triplets = {
	create_character = {
		template = triplets_match
		gender_female_chance = matchmaking_female_gender_chance
		mother = scope:match_choice_multi_mother
		dynasty = none
		location = root.location
		faith = root.faith
		culture = root.culture
		save_scope_as = match_choice_$MATCHID$_1
	}
	create_character = {
		template = triplets_match
		gender_female_chance = matchmaking_female_gender_chance
		mother = scope:match_choice_multi_mother
		dynasty = none
		location = root.location
		faith = root.faith
		culture = root.culture
		save_scope_as = match_choice_$MATCHID$_2
	}
	create_character = {
		template = triplets_match
		gender_female_chance = matchmaking_female_gender_chance
		mother = scope:match_choice_multi_mother
		dynasty = none
		location = root.location
		faith = root.faith
		culture = root.culture
		save_scope_as = match_choice_$MATCHID$_3
	}
}


marry_match_option = {
	if = {
		limit = {
			scope:activity.special_guest:match_recipient = {
				is_female = yes
			}
		}
		scope:activity.special_guest:match_recipient = {
			marry_matrilineal = scope:selected_match_choice
		}
	}
	else = {
		scope:activity.special_guest:match_recipient = {
			marry = scope:selected_match_choice
		}
	}
}

# =======> random_traits = no, <=========
# learning = { 14 22 }

